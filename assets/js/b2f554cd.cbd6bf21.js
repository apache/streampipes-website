"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/06/16/release-092","metadata":{"permalink":"/blog/2023/06/16/release-092","source":"@site/blog/2023-06-16-release-092.md","title":"Apache StreamPipes release 0.92.0","description":"8 minutes to read","date":"2023-06-16T00:00:00.000Z","formattedDate":"June 16, 2023","tags":[],"readingTime":2.255,"hasTruncateMarker":true,"authors":[{"name":"Philipp Zehnder","url":"https://github.com/tenthe","imageURL":"/img/zehnder.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.92.0","author":"Philipp Zehnder","authorURL":"https://github.com/tenthe","authorImageURL":"/img/zehnder.png"},"nextItem":{"title":"Apache StreamPipes release 0.91.0","permalink":"/blog/2023/04/12/release-091"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>8 minutes to read</div>**\\n\\nWe are pleased to announce the release of StreamPipes 0.92.0, which includes several bug fixes, performance improvements, and new features. \\nThis version focuses on enhancing the technical aspects of StreamPipes. \\nLet\'s explore the key updates in this release:\\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n## Improved Python Support:\\nIn response to valuable user feedback, we have improved Python support in StreamPipes.\\nUsers can now seamlessly integrate Python-based scripts, libraries, and modules into their functions. \\nThis enhancement enables leveraging the power of machine learning and advanced analytics algorithms for IIoT data sources. \\nPlease refer to the [Python documentation](https://streampipes.apache.org/docs/docs/python/latest/) for further details.\\n\\n\\n## New Processing Elements: Introducing the Swinging Door Trending (SDT) Filter Processor:\\nTo expand the functionality of StreamPipes, we have introduced several new processing elements.\\nAmong them is the **Swinging Door Trending (SDT) Filter Processor**.\\nThis processor provides a linear trend compression algorithm. \\nEssentially, it replaces a series of continuous points (timestamp, value) with a straight line determined by the start and end points.\\n\\n<img src=\\"/img/blog/2023-06-16/swinging_door_trending.gif\\" alt=\\"demonstration how to use the swinging door trending processor\\"/>\\n\\n## Bug Fixes and Improvements:\\nWe have addressed various bugs and issues reported by our users, resulting in a more stable and reliable StreamPipes experience.\\nWe have also made several performance and usability improvements to enhance overall system efficiency.\\n\\n## Deprecation of Set Adapters\\n\\nIn order to streamline the StreamPipes ecosystem, we have deprecated the functionality of Set Adapters. \\nGoing forward, our focus will solely be on streaming event sources. \\nHowever, we understand the importance of working with files of sensor data, especially during development. \\nTo accommodate this need, we have extended the **File Stream Adapter**, which now offers the following functionalities:\\n1. Create a live simulation of sensor data based on the file.\\n2. Replay the data in the file once, for example, to store it in the **Data Lake**.\\n\\n**IMPORTANT: The set adapters will be removed in the next release.**\\n\\nFrom this release onwards, we encourage you to utilize the **File Stream Adapter** instead of the **File Set Adapter**.\\nTo simulate a file set using the **File Stream Adapter**, you can configure it with `Replay Once: Yes` and `Replay Speed: Fastest (Ignore original time)`.\\nSee the example below:\\n\\n<img src=\\"/img/blog/2023-06-16/file_stream_set.gif\\" alt=\\"demonstration how to use file sets with the file stream adapter\\"/>\\n\\n## Final Remarks\\nWe highly recommend updating to StreamPipes 0.92.0 to take advantage of these new features, bug fixes, and improvements. \\nFor more detailed information, please refer to the [release notes](https://github.com/apache/incubator-streampipes/blob/release/0.92.0/RELEASE_NOTES.md#0920).\\n\\nWe appreciate your continued support and valuable feedback. \\nStreamPipes is continually evolving, and we are dedicated to providing you with a powerful and reliable platform for your IIoT streaming data needs."},{"id":"/2023/04/12/release-091","metadata":{"permalink":"/blog/2023/04/12/release-091","source":"@site/blog/2023-04-12-release-091.md","title":"Apache StreamPipes release 0.91.0","description":"14 minutes to read","date":"2023-04-12T00:00:00.000Z","formattedDate":"April 12, 2023","tags":[],"readingTime":4.72,"hasTruncateMarker":true,"authors":[{"name":"Tim Bossenmaier","url":"https://github.com/bossenti","imageURL":"/img/bossenmaier.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.91.0","author":"Tim Bossenmaier","authorURL":"https://github.com/bossenti","authorImageURL":"/img/bossenmaier.png"},"prevItem":{"title":"Apache StreamPipes release 0.92.0","permalink":"/blog/2023/06/16/release-092"},"nextItem":{"title":"Apache StreamPipes release 0.90.0","permalink":"/blog/2023/01/17/release-090"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>14 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes community is delighted to announce the release of Apache StreamPipes version 0.91.0!\\nThe biggest highlight of this release is the birth of our official StreamPipes Python library.\\nApart from that, we have made a lot of improvements under the hood, especially in terms of improving the development experience (e.g., by introducing and enforcing code style rules).\\nNevertheless, our new version includes more than 90 improvements and bug fixes in total.\\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n## StreamPipes Python\\n[Apache StreamPipes](https://streampipes.apache.org/) aims to enable non-technical users to connect and analyze IoT data streams.\\nTo this end, it provides an easy-to-use and convenient user interface that allows one to connect to an IoT data source and create some visual\\ngraphs within a few minutes. <br/>\\nAlthough this is the main use case of Apache StreamPipes, it can also provide great value for people who are eager to work on data analysis or data science with IoT data, but don\'t want to get in touch with all the hassle associated with extracting data from devices in a suitable format.\\nIn this scenario, StreamPipes helps you connect to your data source and extract the data for you.\\nYou then can make the data available outside StreamPipes by writing it into an external source, such as a database, Kafka, etc.\\nWhile this requires another component, you can also extract your data directly from StreamPipes programmatically using the StreamPipes API.\\nFor convenience, we also provide you with a StreamPipes client both available for Java and Python.\\nSpecifically with StreamPipes Python, we want to address the amazing data analytics and data science community in Python and benefit from the great universe of Python libraries out there.\\n\\n### Getting started\\nBesides our official version, which you can access [here](https://streampipes.apache.org/download.html),\\nwe provide Apache StreamPipes as a convenient release via PyPI.\\nTherefore, you can easily install it via the following command\\n```bash\\npip install streampipes\\n```\\nAll documentation related to StreamPipes Python can be found [here](https://streampipes.apache.org/docs/docs/python/latest/).\\n\\nBut now enough words are written, let\'s just start with a few examples.\\nAs a first step, we want to establish a connection to a running StreamPipes instance.\\n```python\\nfrom streampipes.client import StreamPipesClient\\nfrom streampipes.client.config import StreamPipesClientConfig\\nfrom streampipes.client.credential_provider import StreamPipesApiKeyCredentials\\n\\nconfig = StreamPipesClientConfig(\\n    credential_provider = StreamPipesApiKeyCredentials(\\n        username = \\"test@streampipes.apache.org\\",\\n        api_key = \\"DEMO-KEY\\",\\n        ),\\n    host_address = \\"localhost\\",\\n    https_disabled = True,\\n    port = 80\\n)\\n\\nclient = StreamPipesClient(client_config=config)\\n```\\n\\n`client.describe()` gives you an overview about what can be discovered via the Python client:\\n```bash\\nHi there!\\nYou are connected to a StreamPipes instance running at http://localhost:80.\\nThe following StreamPipes resources are available with this client:\\n1x DataLakeMeasures\\n1x DataStreams\\n```\\n\\nThe required API key can be retrieved from StreamPipes via the UI:\\n\\n<img src=\\"/img/blog/2023-04-12/how-to-get-api-key.gif\\" alt=\\"demonstration how to get an API key in form of a gif\\"/>\\n\\n### Query Data from StreamPipes data lake\\nAs a first step, we can see which data sets are available in the data lake:\\n```python\\nclient.dataLakeMeasureApi.all().to_pandas()\\n```\\n\\nTo query data for a specific data lake measure, the following command takes you there:\\n```python\\nclient.dataLakeMeasureApi.get(identifier=\\"flow-rate\\").to_pandas()\\n```\\nThere are some parameters that allow you to query data more specifically, visit the [docs](https://streampipes.apache.org/docs/docs/python/latest/reference/endpoint/api/data_lake_measure/#streampipes.endpoint.api.data_lake_measure.MeasurementGetQueryConfig) for more detailed information.\\n\\nIf you are curious which features are available for StreamPipes Python, have a look at our [tutorial section](https://streampipes.apache.org/docs/docs/python/latest/tutorials/1-introduction-to-streampipes-python-client/).\\n\\nWe plan to further extend the Python library in the next releases - we welcome your ideas on any features you\'d like to see!\\n\\n## Create Adapter without starting\\n\\nUntil now, when creating an adapter in StreamPipes, the adapter was started immediately after completion.\\nFrom now on you can choose via the adapter overview in the last dialog whether the adapter should be started immediately or later (this is then possible in the adapter overview).\\n\\n<img src=\\"/img/blog/2023-04-12/adapter-running.gif\\" alt=\\"demonstration how to disable automatic start of an adapter in form of a gif\\"/>\\n\\n## Redirect after Login\\n\\nThis is another small user interface improvement: when a user opens a StreamPipes link even though they are not logged in, e.g.,\\nhttp://streampipes.demo/#/connect, StreamPipes displays the login dialog and now redirects the user directly to the target view\\n(in this case the connection overview).\\n\\n## Support Output Streams for Standalone Functions\\nWithin the last release, [0.90.0](/docs/blog/2023/01/17/release-090.html), we introduced StreamPipes Functions as a lightweight alternative to processing elements.  \\nStreamPipes Functions do now support having output streams, which means that they allow not only to consume but to send data to StreamPipes as well.\\n\\nBelow you can see a simple example function that demonstrates how events can be pushed back to StreamPipes again.\\n```java\\npublic class FunctionPublishExample extends StreamPipesFunction {\\n\\n  private static final Logger LOG = LoggerFactory.getLogger(FunctionPublishExample.class);\\n\\n  private static final String FUNCTION_ID = \\"org.apache.streampipes.example.function.publish\\";\\n  private static final String STREAM_APP_ID = \\"example-output-stream-1\\";\\n\\n  private SpOutputCollector outputCollector;\\n\\n  @Override\\n  public List<String> requiredStreamIds() {\\n    return List.of(\\"urn:streampipes.apache.org:eventstream:EtMUkN\\");\\n  }\\n\\n  @Override\\n  public void onServiceStarted(FunctionContext context) {\\n    LOG.info(\\"Service started\\");\\n    this.outputCollector = context.getOutputCollectors().get(STREAM_APP_ID);\\n  }\\n\\n  @Override\\n  public void onEvent(Event event, String streamId) {\\n    LOG.info(\\"on event\\");\\n    var ev = new Event();\\n    ev.addField(\\"timestamp\\", System.currentTimeMillis());\\n    ev.addField(\\"example-property\\", \\"abc\\");\\n    this.outputCollector.collect(ev);\\n  }\\n\\n  @Override\\n  public void onServiceStopped() {\\n    LOG.info(\\"service stopped\\");\\n  }\\n\\n  @Override\\n  public FunctionConfig getFunctionConfig() {\\n\\n    return FunctionConfigBuilder\\n        .create(FunctionId.from(FUNCTION_ID, 1))\\n        .withOutputStream(DataStreamBuilder.create(STREAM_APP_ID, \\"My Function Stream\\", \\"\\")\\n            .property(EpProperties.timestampProperty(\\"timestamp\\"))\\n            .property(EpProperties.stringEp(\\n                Labels.from(\\"my-example-property\\", \\"test\\", \\"test\\"),\\n                \\"example-property\\",\\n                SO.TEXT,\\n                PropertyScope.MEASUREMENT_PROPERTY))\\n            .format(Formats.jsonFormat())\\n            .protocol(Protocols.kafka(\\"localhost\\", 9094, STREAM_APP_ID))\\n            .build())\\n        .build();\\n  }\\n}\\n```\\n\\nThis functionality is also already supported in StreamPipes Python! \ud83d\ude80\\n\\nThis means that you can write a StreamPipes function in Python that allows you to consume streams of data from StreamPipes,\\nperform any data manipulation in Python, and send the data back to StreamPipes, where it can be further processed.\\n\\n\\n<br/>\\nTo get a comprehensive overview of all changes released within Apache StreamPipes 0.91.0\\nplease visit our [release notes](https://github.com/apache/incubator-streampipes/blob/release/0.91.0/RELEASE_NOTES.md#0910)."},{"id":"/2023/01/17/release-090","metadata":{"permalink":"/blog/2023/01/17/release-090","source":"@site/blog/2023-01-17-release-090.md","title":"Apache StreamPipes release 0.90.0","description":"5 minutes to read","date":"2023-01-17T00:00:00.000Z","formattedDate":"January 17, 2023","tags":[],"readingTime":3.66,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://github.com/dominikriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.90.0","author":"Dominik Riemer","authorURL":"https://github.com/dominikriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"Apache StreamPipes release 0.91.0","permalink":"/blog/2023/04/12/release-091"},"nextItem":{"title":"Apache StreamPipes release 0.70.0","permalink":"/blog/2022/10/13/release-070"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes community is pleased to announce the immediate availability of Apache StreamPipes version 0.90.0!\\nIn total, this release was focused on stabilization and closes 57 issues with improvements and bug fixes as well as some new features such as adapters and data sinks. \\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n\\n## Improvements\\nThe focus of this release cycle was on general usability improvements and bug fixes. We continued to harmonize the \\nStreamPipes web interface, so that all views follow a similar navigation. Many improvements were added to the data explorer:\\n\\n* Incomplete events with missing values are now displayed in the data explorer\\n* Improvements to the time selector and edit mode\\n* More configuration options for data download\\n* Improved overall data explorer performance\\n\\nIn addition, we improved features to monitor pipelines and extensions services. The pipeline monitoring component has been restructured and now works independent from the underlying message broker. \\nIn addition, we extended the SDK so that runtime errors can be forwarded to the StreamPipes UI. \\nFurther improvements to the monitoring stack will be added in the next versions.\\n\\n## New Adapters and Data Sinks\\n\\nThis version improves support for existing message brokers in form of adapters and sinks:\\n\\n* Improvements of the `Apache Pulsar` (which is also available as a data sink)\\n* A new adapter and data sink for `Apache RocketMQ`\\n* A new adapter for `NATS` (also available as a data sink)\\n\\n## GitHub Community Features\\n\\nApache StreamPipes is a community effort - everyone is welcome not only to contribute code, but also to provide feedback and other input which helps improving the product.\\nTo improve community interaction, we switched our issue management from Jira to GitHub issues - making it much easier to create issues and to discuss future features.\\nIn addition, we\'ve enabled Github Discussions - feel free to participate in the existing discussions and ask questions if you have problems!\\n\\n* [GitHub Issues](https://github.com/apache/streampipes/issues)\\n* [GitHub Discussions](https://github.com/apache/streampipes/discussions)\\n\\nAnd if you prefer the mailing list, subscribe to [dev@streampipes.apache.org](mailto:dev-subscribe@streampipes.apache.org) or [users@streampipes.apache.org](mailto:users-subscribe@streampipes.apache.org).\\nTech-related and general project discussions as well as release votes will continue to happen on the dev list.\\n\\n<img src=\\"/img/blog/2023-01-17/github-discussions.png\\" alt=\\"Github Discussions overview\\"/>\\n\\n## Preview of Standalone Functions\\nAn exciting new feature is available in preview mode: StreamPipes Functions are a new way to interact with connected data streams in StreamPipes.\\nAs an open system, there are already several ways to extend the functionality of StreamPipes: New adapter can be added to connect to non-supported systems. \\nIn addition, the SDK supports building custom data processors and sinks, so that StreamPipes can be easily extended at runtime in case new analytics operators are needed.\\n\\nBut providing extensions in form of pipeline elements are not always the best choice: E.g., in cases where non-generic algorithms should be executed on a specific data stream, \\nproviding a reusable component for pipeline development is unsuitable.\\n\\nThis is where Functions come into play! StreamPipes Functions allow to define standalone components, which consume one or more connected data streams from StreamPipes and can be used to add custom processing logic.\\nE.g., it becomes easy to apply an ML model on continuous data without the need to build a specific data processing pipeline.\\n\\nFunctions can be registered in an extensions service similar to data processors and sinks by extending a single class:\\n\\n```java\\npublic class MyFunction extends StreamPipesFunction {\\n  @Override\\n  public FunctionId getFunctionId() {\\n    return FunctionId.from(\\"my-app-id\\", 1);\\n  }\\n\\n  @Override\\n  public List<String> requiredStreamIds() {\\n    return List.of(\\"my-stream-id\\");\\n  }\\n\\n  @Override\\n  public void onServiceStarted(FunctionContext context) {\\n    // called on service startup\\n  }\\n\\n  @Override\\n  public void onEvent(Event event, String streamId) {\\n    // called for each incoming event\\n  }\\n\\n  @Override\\n  public void onServiceStopped() {\\n    // called on service shutdown\\n  }\\n}\\n```\\n\\nThis concept, which will also come for more programming languages besides Java offer new ways for developers to interact with available data in StreamPipes and build custom extensions for IIoT analytics.\\n\\nFunctions are available in preview mode and their API should therefore be considered unstable.\\n\\n\\n## Future Roadmap\\n\\nAfter this stabilization release, the next version will most probably bring a major new feature - Python support! \\nThe community is currently working hard to bring the StreamPipes client and functions to the Python world. Stay tuned!\\n\\n<br/>\\nTo get a comprehensive overview of all changes released within Apache StreamPipes 0.90.0\\nplease visit our [release notes](https://github.com/apache/incubator-streampipes/blob/release/0.90.0/RELEASE_NOTES.md#0900)."},{"id":"/2022/10/13/release-070","metadata":{"permalink":"/blog/2022/10/13/release-070","source":"@site/blog/2022-10-13-release-070.md","title":"Apache StreamPipes release 0.70.0","description":"6 minutes to read","date":"2022-10-13T00:00:00.000Z","formattedDate":"October 13, 2022","tags":[],"readingTime":4.38,"hasTruncateMarker":true,"authors":[{"name":"Tim Bossenmaier","url":"https://github.com/bossenti","imageURL":"/img/bossenmaier.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.70.0","author":"Tim Bossenmaier","authorURL":"https://github.com/bossenti","authorImageURL":"/img/bossenmaier.png"},"prevItem":{"title":"Apache StreamPipes release 0.90.0","permalink":"/blog/2023/01/17/release-090"},"nextItem":{"title":"Using Factory I/O with StreamPipes","permalink":"/blog/2022/09/05/using-factory.io-with-streampipes"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>6 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes (incubating) community is delighted to announce the release of Apache StreamPipes version 0.70.0!\\nKey highlights of this release include many enhancements to the data explorer for fast exploration of IoT data and\\na brand new asset management that allows importing and exporting of StreamPipes resources.\\nIn addition, our new version includes more than 50 improvements and bug fixes.\\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n## Preview of Event Schema\\nA very important and inevitable step when connecting to a data source with Apache StreamPipes \\nis the definition of the event schema. By collecting some sample events, Apache StreamPipes is able to suggest \\nan event schema that describes the data structure of the incoming events.\\nAlthough this works quite well in the vast majority of cases, there is usually a need to modify the proposed\\nevent schema to some degree or add additional fields. So far, a user has gotten little idea of what \\nthe revised data source event schema looks like until the adapter has been created and some data was consumed.\\nWith this release, we have included a before/after comparison of the events while defining the event schema.\\nThis allows to compare the proposed events of Apache StreamPipes (`before`) with the events after \\nall the user\'s changes have been applied (`after`).\\nThe after view adapts to each interaction of the user.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-10-13/event-schema-preview.png\\"/>\\n\\n## Export and Import StreamPipes Resource\\nWith this release we introduce a completely new module called `Asset Management`.\\nThis can be selected in the menu bar of the modules on the left side as the third last icon and \\nis marked by a construction icon. This module allows to combine several StreamPipes resources to a so called `Asset`,\\nwhich can be exported and re-imported later. To do this, a new asset must first be created.\\nAfterwards the asset can be edited and the following detail view allows to link all resources \\navailable in StreamPipes to the asset. After the asset has been finally saved, the asset (inlcuding all resources) can be downloaded \\nwithin the configuration module by switching to the `Export/Import` tab. All existing assets are listed there and \\ncan be selected for download.\\nThe downloaded file can then be re-imported later in the same or another StreamPipes instance at the same place.\\n\\n<img src=\\"/img/blog/2022-10-13/asset-manager.gif\\" alt=\\"demonstration how to create an asset and download it afterwards in form of a gif\\"/>\\n\\n## Download Data of Configured Query from Data Lake\\nAnother new feature is the ability to download or export data from the StreamPipes data lake\\ndefined by a user-defined query. Previously, it was only possible to download all events belonging to a data lake index\\nfrom the `Data Lake` tab of the configuration menu. In addition to this, each widget in the `Data Explorer`\\noffers the possibility to download the corresponding data. The underlying query is created from the configuration \\nof the widget and is also used to create the widget\'s figure.\\nThe download supports both `CSV` and `JSON` format.\\n\\n<img src=\\"/img/blog/2022-10-13/custom-query-download.gif\\" alt=\\"demonstration how to download the data of a custom data lake query in form of a gif\\"/>\\n\\n## Slide View in Data Explorer\\nTraditionally, the graphs created in the Data Explorer are displayed in a grid view, where the user can adjust\\nthe arrangement of the figures as well as their height and width.\\nWith this release, another option for displaying the dashboard widgets is available: the slide view.\\nThis view allows to display a single graph in full-screen mode and switch between views using a horizontal menu bar.\\nWhen a new `Data View` is created in the Data Explorer, a choice can be made between `grid view` and \\n`slide view` as the default display mode.\\nOnce a `Data View` is created, the display mode can be changed by clicking the icon in the upper left corner \\nright next to the `Back` button.\\n\\n<img src=\\"/img/blog/2022-10-13/slide-view.gif\\" alt=\\"demonstration how to use the slide view in the data explorer in form of a gif\\"/>\\n\\n## Templates for Adapter Configuration\\nSimilar to the processing elements, it is now possible to create templates for adapter configurations.\\nThis allows you to start from a previously defined set of configuration settings when creating similar adapters.\\nTo create a template for an adapter configuration, start by creating a new adapter and\\nconfiguring all the settings that will be part of the template. Before proceeding to the field\\nconfiguration (the second step of adapter creation), save the current configuration as a template.\\nWhenever a new instance of the same adapter is created, the template can be selected from\\nthe drop-down menu that appears. Templates are only available for the same type of adapter (obviously).\\n\\n<img src=\\"/img/blog/2022-10-13/adapter-template.gif\\" alt=\\"demonstration how to create an adapter template in form of a gif\\"/>\\n\\n## Upload Multiple Files at Once\\nA rather small but very handy improvement is the possibility to upload multiple files at once to StreamPipes.\\nWhen you click the `UPLOAD NEW FILE` button in the `File Management` module, it is now possible to select\\nas many files as you want in the file upload dialog.\\n\\n<br/>\\n\\nTo get a comprehensive overview of all changes released within Apache StreamPipes 0.70.0\\nplease visit our [release notes](https://github.com/apache/incubator-streampipes/blob/release/0.70.0/RELEASE_NOTES.md#0700)."},{"id":"/2022/09/05/using-factory.io-with-streampipes","metadata":{"permalink":"/blog/2022/09/05/using-factory.io-with-streampipes","source":"@site/blog/2022-09-05-using-factory.io-with-streampipes.md","title":"Using Factory I/O with StreamPipes","description":"10 minutes to read","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[],"readingTime":5.5,"hasTruncateMarker":true,"authors":[{"name":"Sven Oehler"}],"frontMatter":{"title":"Using Factory I/O with StreamPipes","author":"Sven Oehler"},"prevItem":{"title":"Apache StreamPipes release 0.70.0","permalink":"/blog/2022/10/13/release-070"},"nextItem":{"title":"Apache StreamPipes release 0.69.0","permalink":"/blog/2022/03/21/_release-0690"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>10 minutes to read</div>**<br/>\\n\\nThis tutorial shows how you can stream sensor data into StreamPipes from a simulation environment (Factory I/O). The\\nsimulation environment is controlled by a \\"Siemens S7-1200\\" PLC and shows a conveyor belt which sorts packages by their\\nheight. The tutorial is based on the upcoming version 0.70.0 and teaches you how to load the sensor data, build a\\npipeline, preprocess the data and create visualizations.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'75%\'}} src=\\"/img/blog/2022-09-05/plc.jpg\\" alt=\\"plc\\"/><br/>\\n\\n\x3c!--truncate--\x3e\\n\\n## 1. Factory I/O\\n\\n<a href=\\"https://docs.factoryio.com/\\">*Factory* I/O</a> is a 3D simulation for virtual factories and is commonly used as\\na PLC training platform. We will need it to simulate the live data.\\n\\n- Set up Factory I/O and make sure that the <a href=\\"https://docs.factoryio.com/tutorials/siemens/sample-s7-1200-1500/\\">\\n  *Sorting by Height (Basic)*</a> simulation works.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/factory.io.png\\" alt=\\"dataView\\"/><br/>\\n\\n## 2. Adapter\\n\\nThe next step is to connect the PLC to StreamPipes. To achieve this we need to create an adapter.\\n\\n- Start <a href=\\"https://streampipes.apache.org/docs/docs/user-guide-introduction.html\\">*StreamPipes*</a>, go to the *\\n  *CONNECT** menu and create a **NEW ADAPTER**.\\n- Select the **PLC4X S7** adapter, insert the **IP-address** of your PLC and **import the file** with the PLC tags (see\\n  below). Then click **NEXT** on the bottom right.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/adapter1.png\\" alt=\\"adapter1\\"/>\\n\\n- If the warning \\"MISSING TIMESTAMP\\" appears, press **ADD TIMESTAMP** and then **NEXT**. This warning occurs because\\n  some data sources don\'t provide a timestamp.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/adapter2.png\\" alt=\\"adapter2\\"/>\\n\\n- You can name the adapter \\"S7_sorting\\" and select the option **PERSIST EVENTS** to make sure the data is persisted. The\\n  adapter is now ready to **START**. (You can check if the adapter is working by pressing the **`?`** symbol in the\\n  connect menu and clicking on **VALUES** to see a live preview).\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/adapter3.png\\" alt=\\"adapter3\\"/><br/>\\n\\n## 3. Dashboard for raw data\\n\\nA dashboard is used to monitor live data from a data stream. We will use it to make sure that the sensor values are\\nupdated when the simulation runs.\\n\\n- Go to the **DASHBOARD** menu and create a **NEW DASHBOARD** \\"Dashboard_sorting\\". Press the pen symbol to edit the\\n  dashboard.\\n- Click **ADD VISUALIZATION** and select the automatically created pipeline \\"Persist S7_sorting\\". Choose the **TABLE**\\n  widget, configure it by pressing **SELECT ALL** and **CREATE** the widget.\\n- Change the size of the table as you like and **SAVE** the dashboard.\\n- The values should now update every 5 seconds. Test it by starting the simulation in Factory I/O.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/dashboard1.png\\" alt=\\"dashboard1\\"/><br/>\\n\\n## 4. Creating a Data View\\n\\nThe Data View is used to create visualization for persisted data in a Data Lake. You can choose various visualization to\\nexplore your data. We will create a table to see the stored data and a bar chart to take a closer look at a single\\nsensor.\\n\\n- Create a **NEW DATA VIEW** \\"Sorting\\" in the **DATA EXPLORER** menu and edit the view.\\n- Select the \\"Persist S7_sorting\\" pipeline at the **NEW WIDGET** menu, **SELECT ALL** fields and press **NEXT**.\\n- Select the **TABLE** visualization. Click **SELECT ALL** and **CREATE**.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/dataView1.png\\" alt=\\"dataView1\\"/>\\n\\n- Now we want to look closer at a single sensor value. Therefore click on the **`+`** symbol on the top left to add a\\n  new widget.\\n- Choose the \\"Persist S7_sorting\\" pipeline again, set the **LIMIT** to 1000 and only select the **I_At_right_entry**\\n  field. Now select  **DISTRIBUTION** as visualization and press **CREATE**. This chart shows how often the sensor\\n  returned true or false (package in front of it or not).\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/dataView2.png\\" alt=\\"dataView2\\"/>\\n\\n## 5. Modifying the Pipeline\\n\\nThe next step is to change the pipeline to add some preproccessing steps. We want to count the number of large packages\\nwhich get transported to the right side and we want to measure the time between two arriving packages.\\n\\n- Therefore **STOP** the running \\"Persist S7_sorting\\" pipeline in the **PIPELINE** menu and **MODIFY** the pipeline.\\n- Add the **BOOLEAN COUNTER** as new pipeline element. Connect the data source to the counter and configure the element.\\n  Select **I_At_right_entry** as boolean field and change the flank parameter to **FALSE -> TRUE**. Then add a **DATA\\n  LAKE** and connect the **BOOLEAN COUNTER** to it. Use \\"Boolean_Counter\\" as identifier.\\n- Add the **BOOLEAN TIMER** to the pipeline and connect the data source to it. Select **I_At_right_entry** as boolean\\n  field too and select **TRUE** and **SECONDS** in the configuration window. Add another **DATA LAKE** and connect the *\\n  *BOOLEAN TIMER** to it. Use \\"Boolean_Timer\\" as identifier.\\n- **SAVE** the pipeline and click the checkbox **START PIPELINE IMMEDIATELY**.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/pipeline.png\\" alt=\\"pipeline\\"/>\\n\\n## 6. Dashboard for preprocessed data\\n\\nAfter we created two new data field in the last step, we will monitor them in the dashboard.\\n\\n- Go to the **DASHBOARD** menu and **EDIT** the dashboard.\\n- Click **ADD VISUALIZATION** and select \\"Persist S7_sorting: Boolean_Counter\\". Create a **TABLE** widget as before and\\n  **SELECT ALL** fields.\\n- Now add one last table. Choose \\"Persist S7_sorting: Boolean_Timer\\" and only select the **measured_time** field\\n- Test your pipeline by starting the simulation again. The counter should now count up when a package passes the sensor\\n  on the right side and the \\"measured_time\\" should show the time since the last package arrived.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/dashboard2.png\\" alt=\\"dashboard2\\"/><br/>\\n\\n## 7. Final Data View\\n\\nFinally we want to improve the Data Explorer and create visualizations with the preprocessed data. We will create a time\\nseries to verify when a new package arrived and a heat map to check the time between two packages.\\n\\n- Go to the **DATA EXPLORER** menu and edit the data view.\\n- Click **ADD WIDGET** and choose the pipeline \\"Persist S7_sorting: Boolean_Counter\\". Select the **counter** field and\\n  choose the **TIME SERIES** visualization.\\n- Create another widget. Choose the \\"Persist S7_sorting: BooleanCounter\\" pipeline and select the **measured_time**\\n  field. Then select the **HEATMAP** and use \\"measured_time\\" as **HEAT VALUE**\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-09-05/dataView3.png\\" alt=\\"dataView3\\"/><br/>\\n\\n## Summary\\n\\nIn this tutorial we learned how to connect a PLC to StreamPipes, monitor the data stream with a dashboard, create a\\npipeline with different preprocessing steps and visualize the data in the Data View. But we just focused on the basics,\\nso feel free to try out your own ideas and use different preprocessing steps, create new visualizations or try out\\nanother simulation environment.\\n\\n## CSV file for PLC tags\\n\\n```text\\nRuntime Name,Path,Data Type,Node Name,Comment,Hmi Visible,Hmi Accessible,Hmi Writeable,Typeobject ID,Version ID\\nI_High_sensor,Tag table_1,Bool,%I0.0,,True,True,True,,\\nI_Low_sensor,Tag table_1,Bool,%I0.1,,True,True,True,,\\nI_Pallet_sensor,Tag table_1,Bool,%I0.2,,True,True,True,,\\nI_Loaded,Tag table_1,Bool,%I0.3,,True,True,True,,\\nI_At_left_entry,Tag table_1,Bool,%I0.4,,True,True,True,,\\nI_At_left_exit,Tag table_1,Bool,%I0.5,,True,True,True,,\\nI_At_right_entry,Tag table_1,Bool,%I0.6,,True,True,True,,\\nI_At_right_exit,Tag table_1,Bool,%I0.7,,True,True,True,,\\nO_Conveyor_entry,Tag table_1,Bool,%Q0.0,,True,True,True,,\\nO_Load,Tag table_1,Bool,%Q0.1,,True,True,True,,\\nO_Unload,Tag table_1,Bool,%Q0.2,,True,True,True,,\\nO_Transf_left,Tag table_1,Bool,%Q0.3,,True,True,True,,\\nO_Tranf_right,Tag table_1,Bool,%Q0.4,,True,True,True,,\\nO_Conveyor_left,Tag table_1,Bool,%Q0.5,,True,True,True,,\\n```"},{"id":"/2022/03/21/_release-0690","metadata":{"permalink":"/blog/2022/03/21/_release-0690","source":"@site/blog/2022-03-21_release-0690.md","title":"Apache StreamPipes release 0.69.0","description":"5 minutes to read","date":"2022-03-21T00:00:00.000Z","formattedDate":"March 21, 2022","tags":[],"readingTime":3.79,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.69.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"Using Factory I/O with StreamPipes","permalink":"/blog/2022/09/05/using-factory.io-with-streampipes"},"nextItem":{"title":"Apache StreamPipes release 0.68.0","permalink":"/blog/2021/07/22/_release-0680"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes (incubating) community is pleased to announce Apache StreamPipes version 0.69.0!\\nThe most notable highlights of this release include a completely reworked data explorer for quick exploration of IoT data and advanced user and access rights management.\\nIn addition, our new release includes more than 80 improvements and bug fixes.\\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n## Data Explorer\\n\\nApache StreamPipes 0.69.0 includes a heavily improved data explorer. The new user interface allows to visually explore data streams within minutes.\\nAny pipeline which uses the ``Data Lake`` sink can be visualized in the data explorer. The completely new query interface allows to easily select date and time ranges and users can choose from either displaying raw data or aggregated time series.\\nThe widget library includes charts to visualize time-series data (e.g., line chart, scatter plots or heatmaps), value distributions (e.g., density or histograms) or single values.\\nThe widget interface is completely customized and users can build rich dashboards.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-data-explorer-2.png\\" alt=\\"Data Explorer\\"/>\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-data-explorer-3.png\\" alt=\\"Data Explorer\\"/>\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-data-explorer-4.png\\" alt=\\"Data Explorer\\"/>\\n\\n## User and access rights management\\nStreamPipes now supports multiple users and roles. The new ``User management`` section in the settings page allows to create individual users and groups.\\nVarious roles can be assigned to users and groups to manage permissions and visible views. For instance, you can now create users which only see dashboards, but cannot create pipelines or connect new data streams.\\nIn addition, individual permissions can be assigned to various resource objects such as pipelines, data streams and dashboards. \\n\\nCommunication between extensions services and the core are now authenticated by default. Service accounts can be created to allow extensions services to access StreamPipes resources.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-user-management-2.png\\" alt=\\"User Management\\"/>\\n\\n\\n## Improved pipeline element modeling\\nWe\'ve removed one of the major drawbacks of previous StreamPipes versions: Pipelines can now be flexibly reconfigured. In previous versions, due to the validation of pipelines and their configuration, only root elements could be modified. \\nThe new version now gives users full flexibility when modeling pipelines (e.g., by removing or modifying elements from the middle of a pipeline), while pipelines are still continuously validated and modeling errors are shown.\\nUpdating pipelines should now be much less distracting and faster.\\n\\n## Other new features\\n\\n### Mail configuration\\n\\nStreamPipes now includes a configuration interface for mail server settings. These settings are used by the email data sink used to trigger email notifications.\\nIn addition, several system-wide mail services exist, e.g., to restore forgotten passwords.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-config-mail.png\\" alt=\\"Mail configuration\\"/>\\n\\n\\n### Login configuration\\n\\nThe login mechanism can now be configured directly in the user interface. A self-registration can be activated to allow users to create new accounts.\\nIn addition, passwords can be restored by using a two-stage email confirmation process. The profile view allows users to change their passwords individually.\\n\\n### Redesign of pipeline editor\\nThe pipeline editor has a new look: The pipeline element selection bar has been moved from the top to the left side. The icons are smaller and for each pipeline element, the name and description are shown by default.\\nThis makes it easier to find the elements you\'re looking for.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-pipeline-editor.png\\" alt=\\"Dark mode\\"/>\\n\\n\\n### Improved service discovery\\nUnder the hood, we\'ve improved the discovery of extensions services. This is part of a larger effort which will be further improved in the next versions.\\nExtensions services now automatically register within the core depending on the IP address of the service. Pipeline element descriptions are now free of the hostname and can be easily updated.\\nSeveral environment variables exist to manually assign the hostname to an extensions service.\\n\\n### Performance\\nWe\'ve improved the overall system performance by replacing the triple store with a standard NoSQL database. This leads to huge performance improvements in terms of system start time, pipeline element installation and overall loading time.\\n\\n### Dark mode ;-)\\nWe know that you wanted this: An experimental dark mode has been added to StreamPipes. The color scheme can be flexibly changed in the profile view and is stored for each user.\\nThe dark mode should be considered experimental, so please expect some layout flaws.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2022-03-21/sp-dark-mode.png\\" alt=\\"Dark mode\\"/>\\n\\n\\n## Migration\\nWhile we are not yet ready for automatic migration, a migration guide explains several new concepts introduced in this StreamPipes version.\\nWe aim at providing a backwards compatible version with release 1.0, planned for later this year."},{"id":"/2021/07/22/_release-0680","metadata":{"permalink":"/blog/2021/07/22/_release-0680","source":"@site/blog/2021-07-22_release-0680.md","title":"Apache StreamPipes release 0.68.0","description":"8 minutes to read","date":"2021-07-22T00:00:00.000Z","formattedDate":"July 22, 2021","tags":[],"readingTime":4.505,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.68.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"Apache StreamPipes release 0.69.0","permalink":"/blog/2022/03/21/_release-0690"},"nextItem":{"title":"Running StreamPipes the Kubernetes-Way using k3s","permalink":"/blog/2020/05/27/streampipes_on_k3s"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>8 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes (incubating) community is pleased to announce Apache StreamPipes version 0.68.0!\\nThe latest release brings many improvements related to health management of pipelines and pipeline monitoring, improved user guidance such as a live preview in the pipeline editor and better handling of pipeline updates as well as several new data processors and sinks such as support for NATS. \\nIn addition, the release contains several bug fixes related to K8s deployment, PLC adapters and pipeline management.\\n\\n\x3c!--truncate--\x3e\\n\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n## User interface\\nThe user interface brings several improvements for users when working with pipelines. \\nFor this release, we focused on providing a better user experience when pipelines and associated dashboard widgets are updated.\\n\\n### Pipeline preview\\n\\nA new pipeline preview allows to quickly inspect the output of data streams and processors during pipeline development.\\nThe preview can be enabled in the pipeline canvas and displays the latest value of each pipeline element every second.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/pipeline-preview.png\\" alt=\\"Pipeline preview\\"/>\\n\\n### Editable dashboard widgets\\n\\nApache StreamPipes 0.68.0 improves the modification of existing dashboard widgets. In the live dashboard, the visualization type and the underlying pipeline can now easily be changed without recreating a widget. \\nIn addition, the dashboard shows additional error messages and hints in case pipelines are stopped or have been deleted. In the first case, pipelines can be conveniently started directly from the dashboard.\\n\\nBesides that, the dashboard now provides more visualization types (e.g., bar race chart, status light and word cloud) based on [Apache ECharts](https://echarts.apache.org).\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/edit-visualizations.png\\" alt=\\"Modify existing dashboard visualizations\\"/>\\n\\n## Monitoring & Resilience\\n\\nThe latest version comes with several improvements related to better monitoring of running pipelines and internal health checking. \\nTo allow users to inspect currently running pipelines, a new pipeline monitoring module has been added to the user interface which shows the current throughput of each pipeline element.\\nIndividual pipeline elements can be selected in the preview panel. For each pipeline element, the number of processed input events, produced output events and the lag is displayed.\\nThe displayed numbers may be slightly inaccurate for higher throughputs, but give an estimate whether the pipeline is running smoothly or lagging behind.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/pipeline-monitoring.png\\" alt=\\"Pipeline Monitoring\\"/>\\n\\nBesides monitoring, StreamPipes 0.68.0 brings many improvements in terms of system resilience. Pipelines are now gracefully stopped once the StreamPipes installation is stopped. \\nRunning pipelines are flagged and restarted at startup time. In addition, StreamPipes checks at every startup for any pipelines that were not properly stopped and restarts these pipelines accordingly.\\nFor all running pipelines, StreamPipes now regularly checks the state of all involved pipeline elements and detects any failures. Problems are displayed in the UI and pipeline elements are automatically re-invoked once they become available after a failure. \\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/pipeline-failed.png\\" alt=\\"Awareness of pipeline failures in the UI\\"/>\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/pipeline-restored.png\\" alt=\\"Recovery of failed pipeline elements\\"/>\\n\\nAltogether, Apache StreamPipes is now able to recover and resume its state even when the power plug is pulled!\\nResiliency is part of an ongoing larger community effort and will be further improved with a new service discovery approach that will be part of the upcoming version 0.69.0.\\n\\nThe Docker Compose-based installation now restarts StreamPipes automatically after a system restart by default.\\n\\n## StreamPipes Client\\n\\nTo allow third-party applications to access concepts managed by Apache StreamPipes, version 0.68.0 brings a preview of the StreamPipes client and REST API.\\nThe public REST API and the client expose several features that were previously only internally available to developers, such as reading pipelines, performing operations on pipelines and subscribing to data sources managed by StreamPipes.\\nAn API token can be easily generated in the profile section of the user interface.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2021-07-22/api-key-generation.png\\" alt=\\"Generating an API key for the StreamPipes client & REST API\\"/>\\n\\nCurrently provided REST interfaces can be seen in the Swagger documentation, which is linked on the login page.\\nThe client is provided as a Java library, an example of its usage is provided in our [Examples Github repository](https://github.com/apache/incubator-streampipes-examples/blob/dev/streampipes-pipeline-elements-examples-processors-jvm/src/main/java/org/apache/streampipes/client/example/StreamPipesClientExample.java)\\n\\n## StreamPipes Extensions\\n\\nWe also added several new adapters to connect data sources and pipeline elements:\\n\\n* A new NATS sink allows to forward events to a NATS broker\\n* The PLC adapter now makes use of the PooledPLCDriverManager\\n* Improvements to the MQTT sink\\n* The IoTDB adapter now uses the latest IoTDB version\\n* All SQL-based sinks now share a common and more stable codebase\\n\\n\\n## Other features and improvements\\n\\n* The connect-master module has been removed and integrated into the core\\n* Library upgrades to Angular (11), Spring Boot, and others\\n* Improvements to the helm chart for K8s deployment\\n\\nSee the [release notes](https://issues.apache.org/jira/projects/STREAMPIPES/versions/12348698) for a complete list of new features and improvements.\\n\\n# Upgrading\\nStreamPipes 0.68.0 is an intermediate release towards a stable version 1.0. Under the hood, we are performing several code migrations to further improve the overall stability and performance of StreamPipes. \\nTherefore, we currently recommend to start with a clean installation when upgrading. We are working towards an auto-update feature which will be available later this year.\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:users@streampipes.apache.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!\\n\\nAnd do not forget to subscribe to our new mailing lists: https://streampipes.apache.org/mailinglists.html"},{"id":"/2020/05/27/streampipes_on_k3s","metadata":{"permalink":"/blog/2020/05/27/streampipes_on_k3s","source":"@site/blog/2020-05-27-streampipes_on_k3s.md","title":"Running StreamPipes the Kubernetes-Way using k3s","description":"15 minutes to read","date":"2020-05-27T00:00:00.000Z","formattedDate":"May 27, 2020","tags":[],"readingTime":11.89,"hasTruncateMarker":true,"authors":[{"name":"Patrick Wiener","url":"https://twitter.com/patrickwiener","imageURL":"/img/wiener.png"}],"frontMatter":{"title":"Running StreamPipes the Kubernetes-Way using k3s","author":"Patrick Wiener","authorURL":"https://twitter.com/patrickwiener","authorImageURL":"/img/wiener.png"},"prevItem":{"title":"Apache StreamPipes release 0.68.0","permalink":"/blog/2021/07/22/_release-0680"},"nextItem":{"title":"Apache StreamPipes release 0.66.0","permalink":"/blog/2020/05/19/release-0660"}},"content":"<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-27/streampipes_k3s.png\\" alt=\\"StreamPipes on k3s\\"/>\\n**<div style={{float: \'left\', paddingRight: \'40px\'}}>15 minutes to read</div>**\\n<br/>\\n\\n\\nThis blog post is the second part of a series on how we want to bring StreamPipes closer to the edge. The [first part](/docs/blog/2020/01/23/streampipes_on_rpi) describes how we managed to build and deploy StreamPipes on one Raspberry Pi (Model 4), while the [second part](/docs/blog/2020/05/27/streampipes_on_k3s) further covers how to deploy StreamPipes over a Kubernetes cluster of two Raspberry Pi\'s via k3s using our StreamPipes helm chart.\\n\x3c!--truncate--\x3e\\n\\n**<TL;DR>**\\n\\n**With new advancements that came in the last StreamPipes release, we managed to reduce the required resources (mainly memory) drastically. To this extent, we cross-compiled StreamPipes Docker images for ARM support and deployed our lite version on a Raspberry Pi (Model 4). We showcase, that it is feasible to run analytical pipelines with ease and operate StreamPipes at moderate load. Additionally, we demonstrate how to deploy StreamPipes over a two-node k3s cluster using our StreamPipes helm chart.**\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'80%\'}} src=\\"/img/blog/2020-05-27/k3s.png\\" alt=\\"K3s\\"/>\\n\\n## Introduction\\n\\nWhile it is easy to get started with StreamPipes in no time using our single-node deployment [instructions](/docs/docs/user-guide-installation) using Docker and Docker-Compose, StreamPipes naturally is designed to run in a distributed cluster setup through its microservice architecture.\\n\\nThis architectural design paired with the advancements of multi-architecture StreamPipes images as described in the previous blog post allows us to run certain analytical pipeline element containers with ease on various target nodes as well as target hardware architecture wether it is X86, ARM32v7, or ARM64v8. This becomes more valuable, as we shift the focus away from centralized cloud or data center only deployments where we generally are provided with a homogenous compute landscape in terms of resources towards edge deployments that oftentimes envolve resource-limited, constrained devices that not only differ in terms of compute but also in terms of their chip architecture.\\n\\nThereby, having multi-architecture images in your repertoire is key to deal with the challenge of heterogeneity in compute resources along the edge-cloud continuum. However, there are other challenges that occur when dealing with distributed container deployments such as automating deployments itself, scaling them, managing the containerized applications, taking care of networking between services, or realizing fault-tolerance by comparing the desired state against the current one. If there wasn\'t some solution we could leverage that takes care of all of this.\\n\\n## Well, which K to use? Kubernetes, K3s\\n\\nFortunately, there exists a few solutions in the container ecosystem with the open source container orchestrator [Kubernetes](https://kubernetes.io) (K8s) being the defacto standard, thereby incorporating the best ideas of Google\'s internal large-scale container cluster management system [Borg](https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/) (see academic paper about the details published at [EuroSys 2015](https://research.google/pubs/pub43438/)). Since we are not going to write \\"yet another K8s basics blog post\\", we refer to their docs or other awesome blog posts such as the [Kubernetes 101](https://medium.com/google-cloud/kubernetes-101-pods-nodes-containers-and-clusters-c1509e409e16) to get familiarized with the concepts and terminology. With all the power, concepts and terminology K8s provides, it is oftentimes hard for newcomers to get started. Additionally, not all use cases necessarily need these extra features that K8s adds.\\n\\nOn the other hand, there exists [K3s](https://k3s.io/), a lightweight Kubernetes distro by Rancher that was introduced early 2019 and has since then gained huge popularity. As it is stated on their website:\\n\\n* **Perfect for Edge**: _K3s is a highly available, certified Kubernetes distribution designed for production workloads in unattended, resource-constrained, remote locations or inside IoT appliances_\\n* **Simplified & Secure**: _K3s is packaged as a single <40MB binary that reduces the dependencies and steps needed to install, run and auto-update a production Kubernetes cluster._\\n* **Optimized for ARM**: _Both ARM64 and ARMv7 are supported with binaries and multiarch images available for both. K3s works great from something as small as a Raspberry Pi to an AWS a1.4xlarge 32GiB server._\\n\\nThus, this lead us to the point to say, hey why not use K3s to manage StreamPipes in all its glory. The containerized microservice design in addition to the newly available multiarch images are a great fit.\\n\\n\\n## StreamPipes Helm Chart\\nWhile you can easily write an deploy K8s YAML-based manifests for your deployments and services and so on the standard way, it is way more convenient to leverage  [Helm](https://helm.sh/), the package manager for K8s. Helm describes complex, distributed deployments using **charts** in order to provide repeatable application installation, easy updates, rollbacks etc.\\n\\nTo this extent, we wrote a Helm chart for StreamPipes that can be found on our Github [incubator-streampipes-installer](https://github.com/apache/incubator-streampipes-installer/tree/dev/helm-chart) repository. This allows to deploy StreamPipes as one liner as shown later. Helm charts follow a certain directory structure as depicted in the following:\\n\\n```\\nhelm-chart/\\n  Chart.yaml\\n  values.yaml\\n  templates/\\n  ...\\n```\\nThe `Chart.yaml` file contains a description of the chart, e.g., metadata such as chart name, version, maintainers etc.\\n\\nThe `values.yaml` file contains default values for all charts and in our case serves the purpose to provide a central place to store all variable/values, e.g., `streampipes.registry: \\"apachestreampipes\\"`, that replace chart templates such as the registry and version of the StreamPipes backend image:\\n\\n```yaml\\n...\\nimage: {{ .Values.streampipes.registry }}/backend:{{ .Values.streampipes.version }}\\n...\\n```\\n\\nLastly, the `template/` directory is for template files. When Helm evaluates a chart, it sends all of the files in this directory through the template rendering engine before collecting the results and finally forwarding them to K8s. If interested, you can read more on this in the [official Helm documentation](https://helm.sh/docs/).\\n\\n\\n## The almighty StreamPi K3s Cluster\\nAs pointed out in the first part of the series, we have gained valueable insights on how to run and deploy StreamPipes on a Raspberry Pi. This worked out so greatly, that we thought, why not step up the game, use another Pi and built the **almighty StreamPi cluster** by leveraging K3s for orchestration and management.\\n\\n**Note**: We are aware that this is far off from a production-grade setup, especially running StreamPipes core services such as the central pipeline management backend, or the UI in a two-node cluster. However, it provides a solid starting point for more elaborate deployments along the edge-cloud continuum.\\n\\nAs shown in the following figure, starting from the multiarch images hosted on [Dockerhub](https://hub.docker.com/search?q=apachestreampipes&type=image), we first provisioned the two Pi\'s with Docker, install and setup K3s and finally deploy our StreamPipes helm chart in order for users to connect, analyze and exploit their IIoT data with StreamPipes.\\n\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-27/deployment.png\\" alt=\\"Deployment\\"/>\\n\\nIn the remainder, we cover how we installed Helm and K3s to form our almighty StreamPi K3s cluster. At the time of writing, we tested our deployment using the latest version of the Docker, Helm as well as K3s in the following setup\\n\\n* 2x Raspberry Pi Model 4 (4GiB RAM): `streampi-01`, `streampi-02`\\n* Raspbian Buster 10\\n* Docker 19.03.8\\n* Helm 3.1.2\\n* K3s v1.17.4+k3s1\\n\\n\\n### 1. Install Docker\\nSSH into your Raspberry Pi\'s and run the following command:\\n```bash\\ncurl -sSL https://get.docker.com | sh\\n```\\n\\n### 2. Install K3s\\nNow that we got Helm installed, we can proceed and install K3s. Thus, we must check wether we fulfill all the requirements. These are mainly network related, such that specific ports (server on `6443`) are accessible. You should carefully read about this in their [official documentation](https://rancher.com/docs/k3s/latest/en/installation/installation-requirements/).\\n\\nOther than that, lean back and enjoy - the installation happens so fast, you might miss it if you get a coffee :)\\n\\n#### SSH into K3s server (`streampi-01`)\\nOn the server node, run the following command:\\n\\n```bash\\nsudo curl -sfL https://get.k3s.io | sh -\\n```\\nA kubeconfig file is written to `/etc/rancher/k3s/k3s.yaml` and the service is automatically started or restarted. The install script will install k3s and additional utilities, such as `kubectl`, `crictl`, `k3s-killall.sh`, and `k3s-uninstall.sh`.\\n\\nThe K3s installer creates a systemd service which can be used to `stop`, `start`, `restart` and check the `status` of the K3s server.\\n\\n```bash\\nsudo systemctl status k3s.service\\n\\n\u25cf k3s.service - Lightweight Kubernetes\\n   Loaded: loaded (/etc/systemd/system/k3s.service; enabled; vendor preset: enabled)\\n   Active: active (running) since Sat 2020-04-11 15:54:07 BST; 3 days ago\\n     Docs: https://k3s.io\\n  Process: 10193 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)\\n  Process: 10194 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)\\n Main PID: 10195 (k3s-server)\\n (...)\\n```\\n\\nNext, copy the server node token in order to connect additional agent nodes to the cluster.\\n```bash\\nsudo cat /var/lib/rancher/k3s/server/node-token\\n```\\n\\n#### SSH into K3s agent (`streampi-02`)\\nNow, open a new terminal session and SSH into your agent and run the following command, thereby adding the copied `K3S_TOKEN` to connect to the server, that is specified using `K3S_URL`.\\n\\n```bash\\nsudo curl -sfL https://get.k3s.io | K3S_URL=https://streampi-01:6443 \\\\\\nK3S_TOKEN=<NODE_TOKEN> sh -\\n```\\n\\nThe K3s installer creates a systemd service which can be used to `stop`, `start`, `restart` and check the `status` of the K3s agent.\\n\\n```bash\\nsudo systemctl status k3s-agent.service\\n\\n\u25cf k3s-agent.service - Lightweight Kubernetes\\n   Loaded: loaded (/etc/systemd/system/k3s-agent.service; enabled; vendor preset: enabled)\\n   Active: active (running) since Sat 2020-04-11 16:05:37 BST; 3 days ago\\n     Docs: https://k3s.io\\n  Process: 24469 ExecStartPre=/sbin/modprobe br_netfilter (code=exited, status=0/SUCCESS)\\n  Process: 24470 ExecStartPre=/sbin/modprobe overlay (code=exited, status=0/SUCCESS)\\n Main PID: 24471 (k3s-agent)\\n (...)\\n```\\n\\nThat\'s it ... that\'s all!\\n\\nWhen you go back to the terminal session on the K3s server you can list all nodes in the cluster using standard `kubectl` commands.\\n\\n```bash\\nkubectl get nodes\\nNAME              STATUS   ROLES    AGE   VERSION\\nstreampi-02   Ready    <none>   3d    v1.17.4+k3s1\\nstreampi-01   Ready    master   3d    v1.17.4+k3s1\\n```\\n\\nHmmm - but wait. We did only add one agent node to the cluster right? Well, that\'s true, however when installing K3s using the script the server automatically installs and runs an agent on the same node.\\n\\n### 3. Install Helm\\nSSH into the RPi that should act as the K3s server later on - in our case this is `streampi-01` and install Helm. Since we are using Helm 3 there is no need to install tiller. Thus, installing helm is as simple as running the following command:\\n\\n```bash\\ncurl -sSL https://get.helm.sh/helm-v3.1.2-linux-arm.tar.gz | sudo tar -xzf - -C /usr/local/bin/ linux-arm/helm --strip-components=1\\n```\\nThis command downloads the Helm binary release from Github, extracts only the binary and puts it in `/usr/local/bin`. Try go check `helm version` to see if it worked.\\n\\n```bash\\nversion.BuildInfo{Version:\\"v3.1.2\\", GitCommit:\\"d878d4d45863e42fd5cff6743294a11d28a9abce\\", GitTreeState:\\"clean\\", GoVersion:\\"go1.13.8\\"}\\n```\\n\\nTo use Helm, we can set and export `KUBECONFIG` environment variable to point to the kubeconfig under `/etc/rancher/k3s/k3s.yaml`.\\n```bash\\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\\n```\\nAlternatively, if you want this permanently you can either add it to your `.bashrc`/`.zshrc`, or create a `.kube` directory in your home directory and symlink the `k3s.yaml`.\\n\\n```bash\\nmkdir $HOME/.kube\\nln -s /etc/rancher/k3s/k3s.yaml $HOME/.kube/config\\n```\\n\\n\\n## Deploy StreamPipes on K3s using Helm\\nNow, that we have all set up, we can go ahead and deploy StreamPipes using our Helm chart. Therefore, we go to the server node (`streampi-01`), where we installed Helm. Next, we clone our StreamPipes installer repository (`dev` branch) and navigate to the helm-chart directory.\\n\\n**Note**: At the point of writing, the helm chart is **only** available in the `dev` branch. This will change in the future as we update the repository.\\n\\n```bash\\ngit clone -b dev --single-branch https://github.com/apache/incubator-streampipes-installer.git\\ncd incubator-streampipes-installer\\n```\\n\\nAt this point, we can leverage Helm\'s `install` command in order to install the StreamPipes Helm chart. Since Helm reads the K3s kubeconfig, it forwards the deployment request to K3s. As per default, we deploy StreamPipes `lite` version, where we only start standalone Java-based pipeline elements and disregard the ones building on top of our Flink wrapper.\\n\\n```bash\\nhelm install streampipes helm-chart\\n\\nNAME: streampipes\\nLAST DEPLOYED: Tue Apr 14 18:13:19 2020\\nNAMESPACE: default\\nSTATUS: deployed\\nREVISION: 1\\nTEST SUITE: None\\n```\\n\\nNext, K3s receives this requests and goes ahead and downloads the corresponding Docker images and starts the deployments in the right order according to the specified dependencies, creates services as well as persistent volume claims when needed. This step takes some time depending on your internet connection and the hardware when starting the containers. You can check the status of the StreamPipes Helm installation using `kubectl get pods -o wide` (when adding `-w`, you can automatically watch for changes). You can also use the custom command below to only display the pod name, status as well as the node where it was scheduled and deployed to.\\n\\n```bash\\nkubectl get pods -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.spec.nodeName\\n\\nNAME                                           STATUS    NODE\\nactivemq-66d58f47cf-b88nb                      Running   streampi-01\\nzookeeper-5d9947686f-7vpjb                     Running   streampi-02\\ncouchdb-77db98cf7b-6nn99                       Running   streampi-02\\nconsul-55965f966b-tjcfb                        Running   streampi-02\\ninfluxdb-b95b6479-mvgbg                        Running   streampi-02\\nbackend-6cdfb7bbf9-b4vgh                       Running   streampi-02\\npipeline-elements-all-jvm-64795974-g2xhv       Running   streampi-02\\nkafka-657b5fb77-xtw8p                          Running   streampi-01\\nconnect-master-56f5f947d-n2t5b                 Running   streampi-01\\nsources-watertank-simulator-6958f7844c-2jv78   Running   streampi-01\\nconnect-worker-fdbd6f464-m6vm8                 Running   streampi-01\\nnginx-5d4498d4f5-fcccq                         Running   streampi-02\\n```\\n\\nAs can be seen, a fair amount of StreamPipes containers aka pods were deployed on `streampi-01` and `streampi-02`. When everything goes well, you should see all containers in the status `RUNNING` after a couple of minutes. To access K8s cluster UI pod a `NodePort` was created. The `NodePort` publishes the UI (nginx) service on every node using using its public IP and a port. Then you can access the service using any of the cluster IPs and the assigned port.\\n\\n```yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: nginx\\nspec:\\n  selector:\\n    app: nginx\\n  type: NodePort\\n  ports:\\n    - name: main\\n      protocol: TCP\\n      port: 80 # container port\\n      targetPort: 80 # node port\\n```\\n\\nThat means, you can go and check the StreamPipes UI either on `http://streampi-01/` or `http://streampi-02/` - K8s service handles the routing to the nginx pod containing the UI - just to name one nice feature.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-27/streampi_installation.png\\" alt=\\"Installation\\"/>\\n\\n## Sum up & Where to go from here?\\nStarting out as a simple hack session on a late afternoon, we build multi-archicture StreamPipes Docker images and deployed them on a Raspberry Pi in the first part of the series. Though, this is was feasible StreamPipes architectural microservice design provides a natural fit for a distributed cluster deployment. To this extent, we provide a StreamPipes Helm chart that lets you easily deploy StreamPipes in a one-liner in a Kubernetes cluster as showcased using a testbed of two Raspberry Pi\'s and lightweight K3s.\\n\\nAs of now, we let K8s handle the scheduling of containers for us in a random fashion. From here, we can further explore K8s feature such as `nodeSelector` or `nodeAffinity` that helps you use labels (`key=value` pairs) for pod to node assignment.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'60%\'}} src=\\"/img/blog/2020-05-27/helm_k3s.png\\" alt=\\"HelmK3s\\"/>\\n\\n- [Part 1: StreamPi(pes) - Running StreamPipes on Raspberry Pi](/docs/blog/2020/01/23/streampipes_on_rpi)\\n- **[Part 2: Running StreamPipes the Kubernetes-Way using K3s](/docs/blog/2020/05/27/streampipes_on_k3s)**\\n\\n\\n### Useful links\\n\\n- [1] [K3s - lightweight Kubernetes distro](https://k3s.io/)\\n- [2] [Helm - the package manager for Kubernetes](https://helm.sh/)\\n- [3] [Github: StreamPipes Helm chart](https://github.com/apache/incubator-streampipes-installer/tree/dev/helm-chart)"},{"id":"/2020/05/19/release-0660","metadata":{"permalink":"/blog/2020/05/19/release-0660","source":"@site/blog/2020-05-19-release-0660.md","title":"Apache StreamPipes release 0.66.0","description":"6 minutes to read","date":"2020-05-19T00:00:00.000Z","formattedDate":"May 19, 2020","tags":[],"readingTime":3.435,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Apache StreamPipes release 0.66.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"Running StreamPipes the Kubernetes-Way using k3s","permalink":"/blog/2020/05/27/streampipes_on_k3s"},"nextItem":{"title":"StreamPi(pes) - Running StreamPipes on Raspberry Pi","permalink":"/blog/2020/01/23/streampipes_on_rpi"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>6 minutes to read</div>**\\n<br/>\\n\\nThe Apache StreamPipes (incubating) community is proud to announce Apache StreamPipes version 0.66.0! This release is our first official Apache release and brings some very cool features and improvements the community has worked on over the past months.\\n\x3c!--truncate--\x3e\\n\\nThe latest release brings major improvements to the live dashboard, the notification system, multiple new pipeline elements and StreamPipes Connect adapters, a simplified installation, more deployment options and a variety of bug fixes and minor improvements.\\nThe current release can be downloaded <a href=\\"https://streampipes.apache.org/download.html\\">here</a>.\\n\\n\\n## User interface\\n\\nThis release introduces a completely redesigned live dashboard. The old dashboard had some issues, most importantly, widgets could not be freely moved on the dashboard panel and the layout of dashboard widget was not persisted. \\nWith the new dashboard, users are able to customize and layout widgets in a much easier and more powerful way. The dashboard brings the following improvements:\\n* Multiple dashboards can be created and viewed\\n* Widgets can be flexibly resized on a grid\\n* More configuration options for widgets, e.g., change the color and appearance of widgets.\\n* A presentation mode allows to display a live dashboard without the navigation bars.\\n\\nThe new dashboard has full feature parity with the old dashboard in terms of available widgets. The new architecture allows us to integrate even more visualizations with less effort in the upcoming versions.\\n\\n<div class=\\"my-carousel\\">\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-19/dashboard-02.png\\" alt=\\"New dashboard\\"/>\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-19/dashboard-01.png\\" alt=\\"New dashboard\\"/>\\n</div>\\n\\nIn addition, the notification system has been significantly improved. The new notification view now offers a chat-like interface which allows you to select notifications per pipeline. The history of notifications is fully available and can be opened by scrolling to the top - similar to the behaviour of popular messaging services:\\n\\n<div class=\\"my-carousel\\">\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-19/notification-01.png\\" alt=\\"New dashboard\\"/>\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-05-19/notification-02.png\\" alt=\\"New dashboard\\"/>\\n</div> \\n\\nA technical note:\\nBoth features are part of our current effort to gradually migrate AngularJS components to Angular 9 (2+), now leaving the pipeline editor the only component that is still implemented in AngularJS.\\nOnce the editor has been migrated as well (which is currently targeted for the upcoming release 0.67.0), we\'ll be able to release global UI features (e.g., better user management) in a much faster way.\\n\\n\\n## Apache StreamPipes Extensions\\n\\nWe also added several new adapters to connect data sources and pipeline elements:\\n\\n\\n* We added several new processors for handling boolean values, which are targeted towards better processing of PLC data.\\n* processors-geo-jvm includes more processors for geo operations, e.g., distance calculation, speed calculation and more.\\n* processors-text-mining includes several processors relevant for text mining (e.g., chunking, language detection)\\n* New adapters for NETIO power sockets, and several new sinks (e.g., MQTT and Eclipse Ditto) \\n\\n\\n## Installation & Deployment\\n\\nThe community also improved the installation process. Now, the installer offered for download includes all three supported deployment options and tools:\\n* The installer, targeted at users, with installation scripts for Linux, MacOS and Windows\\n* The CLI, targeted at developers, for configurable deployment of individual services\\n* Helm charts for Kubernetes\\n\\nA very cool new feature are Docker images for ARM, which allow to run StreamPipes on a Raspberry Pi. This will be part of an upcoming blog post on running Apache StreamPipes at the edge.\\n\\nFrom now on, users are no longer required to enter the server IP upon startup, which should further reduce errors at installation time.\\n\\n## Other features and improvements\\n\\n* Connect adapters expose their own icons and documentation.\\n* The UI has been upgraded to Angular 9 and the build has more optimizations enabled, leading to significant performance gains.\\n* Pipelines are now auto-saved, so that you can resume building your pipeline after refreshing the browser.\\n\\nSee the [release notes](https://issues.apache.org/jira/projects/STREAMPIPES/versions/12347025) for a complete list of new features and improvements.\\n\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:users@streampipes.apache.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!\\n\\nAnd do not forget to subscribe to our new mailing lists: https://streampipes.apache.org/mailinglists.html"},{"id":"/2020/01/23/streampipes_on_rpi","metadata":{"permalink":"/blog/2020/01/23/streampipes_on_rpi","source":"@site/blog/2020-01-23-streampipes_on_rpi.md","title":"StreamPi(pes) - Running StreamPipes on Raspberry Pi","description":"5 minutes to read","date":"2020-01-23T00:00:00.000Z","formattedDate":"January 23, 2020","tags":[],"readingTime":5.315,"hasTruncateMarker":true,"authors":[{"name":"Patrick Wiener","url":"https://twitter.com/patrickwiener","imageURL":"/img/wiener.png"}],"frontMatter":{"title":"StreamPi(pes) - Running StreamPipes on Raspberry Pi","author":"Patrick Wiener","authorURL":"https://twitter.com/patrickwiener","authorImageURL":"/img/wiener.png"},"prevItem":{"title":"Apache StreamPipes release 0.66.0","permalink":"/blog/2020/05/19/release-0660"},"nextItem":{"title":"Moving to the Apache Incubator","permalink":"/blog/2019/11/25/moving-to-the-apache-incubator"}},"content":"<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-01-23/streampipes_raspberrypi.png\\" alt=\\"StreamPipes on Raspberry Pi\\"/>\\n**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\n\\nThis is the start of a two part series on how we want to bring StreamPipes closer to the edge. The [first part](/docs/blog/2020/01/23/streampipes_on_rpi) describes how we managed to build and deploy StreamPipes on one Raspberry Pi (Model 4), while the [second part](/docs/blog/2020/05/27/streampipes_on_k3s) further covers how to deploy StreamPipes over a Kubernetes cluster of two Raspberry Pi\'s via K3s using our StreamPipes helm chart.\\n\x3c!--truncate--\x3e\\n\\n<TL;DR>\\n\\n_With new advancements that came in the last StreamPipes release, we managed to reduce the required resources (mainly memory) drastically. To this extent, we cross-compiled StreamPipes Docker images for ARM support and deployed our lite version on a Raspberry Pi (Model 4). We showcase, that it is feasible to run analytical pipelines with ease and operate StreamPipes at moderate load._\\n\\nApache StreamPipes (incubating) is a self-service (Industrial) IoT toolbox to enable non-technical users to easily connect, analyze and explore IoT data streams. Users can leverage algorithms from an extensible toolbox to model their analytical pipelines. By building on a microservice architecture, StreamPipes components can be distributed in a cluster (e.g. Kubernetes)  as well as run on a single node for prototypical and development purposes using Docker. With the latest release of StreamPipes (0.65.0), we managed to reduce the memory consumption drastically to use less than 2Gig\u2018s of RAM for the lite version. Since we had a Raspberry Pi Model 4 laying around, we thought: hey why not just deploy StreamPipes on a Pi - and that\u2019s what we did. Along the way, we learned quite some interesting things, that we want to share in this blog post.\\n\\nWhen users model their analytical pipelines using the graphical pipeline editor, the corresponding pipeline element containers, hosting these algorithms, are invoked by a rest call from the backend to start a new thread with the corresponding algorithm. In typical edge use cases such as in the industrial internet of things (IIoT), it is oftentimes neither feasible nor necessary to simply send all raw data to the cloud to perform analytics. On the contrary, requirements often induce the challenges to either derive decisions in a time-sensitive manner (near realtime), preprocess  data to reduce and harmonize it, or anonymize it by pixeling personal information such as faces in video footages. In these scenarios, StreamPipes can aid by running dedicated pipeline element containers directly on the edge using edge nodes such as Raspberry Pi\u2018s close to where data origins to address the aforementioned challenges.\\n\\n<img class=\\"blog-image\\" align=\\"center\\" style={{maxWidth: \'80%\'}} src=\\"/img/blog/2020-01-23/00_idea.png\\" alt=\\"StreamPipes lite on Raspberry Pi\\"/>\\n\\nStreamPipes Docker images were only built for x86 based architectures. However, oftentimes edge devices such as Raspberry Pi\'s or Nvidia Jetson Nano\'s run ARM based 32 or 64bit architectures. Thus, we could not simply use our existing Docker images to deploy StreamPipes as is. Luckily, Docker offers solutions to cross-compile images. Together with Docker\u2018s experimental manifest feature, the deployment works like a charms [[1](https://docs.docker.com/engine/reference/commandline/manifest/)]. There are awesome blog posts online [[2](https://ownyourbits.com/2018/06/27/running-and-building-arm-docker-containers-in-x86/)] that guide you through the process of cross-compilation, so we are not going to cover it in this blog post. With that, we were able to build StreamPipes images for AMD, ARM32v7 and ARM64v8 by just adding a few lines to our Dockerfiles and CI/CD pipelines. After having built and pushed our newly created Docker images, we were able to use our existing installation workflow, e.g. StreamPipes CLI, to start StreamPipes on the Raspberry Pi.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-01-23/01_start.png\\" alt=\\"StreamPipes CLI starting StreamPipes lite version on Raspberry Pi 4\\"/>\\n\\nThe figure shows StreamPipes CLI starting our internal `0.65.1-SNAPSHOT` version, where we tested the multiarch build of our images. As depicted, all StreamPipes lite services are started. Due to the fact, that we created a manifest for all our Docker images, we did not have to change a single image description specified in the various `docker-compose.yml` files in the service repository. This is pretty cool! The Docker daemon automatically pulls the correct image for the corresponding architecture - in our case ARM32v7. Taking a quick look at `htop` indicates that we operate on a constant level of consumed memory at around ~1.7GB.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-01-23/02_htop.png\\" alt=\\"htop showing around 1.7GB memory consumption\\"/>\\n\\n### Demo: Temperature Monitoring Pipeline\\nTo test our setup, we deployed a simple temperature monitoring pipeline, that throws a notification whenever the temperature value exceeds a certain threshold (in this case: 65\xb0C) and visualizes the results in a basic dashboard (see figure). Therefore, we use existing pipeline elements of the algorithm toolbox provided within the lite version. Thereby, StreamPipes lite already hooks you up with sample data sources - in this case a flow rate sensor - producing temperature, as well as mass flow measurements. So our temperature monitoring pipeline consists of the following pipeline elements:\\n\\n- **Data source:** Flow rate sensor (mock data generating `<timestamp;sensorid;massflow;temperature>` each second)\\n- **Data processor:** Numerical filter (specified temperature threshold: > 65\xb0C)\\n- **Data sinks:** Dashboard visualization, Notification (internal)\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-01-23/03_pipeline.png\\" alt=\\"Simple pipeline visualizing and notifying about temperature values above threshold (here 65\xb0C)\\"/>\\n\\nAfter saving and starting the pipeline, we built our dashboard based on the results of the pipeline, only showing values above 65\xb0C. Additionally, we receive a notification for every event, that exceeds this temperature threshold.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'100%\'}} src=\\"/img/blog/2020-01-23/04_dashboard.png\\" alt=\\"Dashboard\\"/>\\n\\n\\n### So, what\'s next?\\nStarting out as a simple hack session on a late afternoon, trying to test where we could potentially run StreamPipes on and push it to it\'s limits, we gained valueable insights on how to build and run it on various architectures. Even though we do not recommend deploying StreamPipes in it\'s full glory on single low-resourced devices such as Raspberry Pi\'s, we aim to bring certain algorithms closer to where data is generated - on the edge. Consequently - apart from x86 images - we plan on providing our StreamPipes Docker images for ARM based architectures in the future. As a sneak peak - we also plan on deploying StreamPipes over a K3s [[3](https://k3s.io/)] cluster, a lightweight Kubernetes distro especially suited for IoT and edge scenarios.\\n\\n- **[Part 1: StreamPi(pes) - Running StreamPipes on Raspberry Pi](/docs/blog/2020/01/23/streampipes_on_rpi)**\\n- [Part 2: Running StreamPipes the Kubernetes-Way using K3s](/docs/blog/2020/05/27/streampipes_on_k3s)\\n\\n\\n### Useful links\\n- [1] [Docker manifest docs](https://docs.docker.com/engine/reference/commandline/manifest/)\\n- [2] [Running and Building ARM Docker containers in x86](https://ownyourbits.com/2018/06/27/running-and-building-arm-docker-containers-in-x86/)\\n- [3] [K3s - lightweight Kubernetes distro](https://k3s.io/)"},{"id":"/2019/11/25/moving-to-the-apache-incubator","metadata":{"permalink":"/blog/2019/11/25/moving-to-the-apache-incubator","source":"@site/blog/2019-11-25-moving-to-the-apache-incubator.md","title":"Moving to the Apache Incubator","description":"8 minutes to read","date":"2019-11-25T00:00:00.000Z","formattedDate":"November 25, 2019","tags":[],"readingTime":3.695,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Moving to the Apache Incubator","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"StreamPi(pes) - Running StreamPipes on Raspberry Pi","permalink":"/blog/2020/01/23/streampipes_on_rpi"},"nextItem":{"title":"StreamPipes release 0.65.0","permalink":"/blog/2019/11/23/release-0650"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>8 minutes to read</div>**\\n<br/>\\nGreat news: StreamPipes is moving to the Apache Incubator!\\n\\n\x3c!--truncate--\x3e\\n\\n## The StreamPipes journey so far\\n\\nWe started to build the early foundations of StreamPipes back in 2014 as part of the EU research project _ProaSense_.\\nOur goal was to make event processing accessible to end users with a focus on the Industrial IoT, without the technical\\nexpertise required by stream processing tooling.\\nAfter some very early prototypes (see an early screenshot below :-)) demonstrating the usefulness of the pipeline editor\\nand the underlying semantics-based data model in two manufacturing-related use cases, we open-sourced StreamPipes in\\n2017 and continued development in various research projects.\\nSince then, we presented and showcased StreamPipes at various events: fairs, meetups, conference talks and so on. For\\ninstance, in 2019 we attended over 20 events where we gave demos or talked about StreamPipes.\\nIt is great to see that the solution is now steadily getting increased traction in the Industrial IoT space.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'90%\', marginBottom:\'20px\'}} src=\\"/img/blog/2019-11-25/2019-11_StreamPipes-v0.png\\" alt=\\"1st prototype of the StreamPipes UI\\"/>\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-11-25/2019-11_StreamPipes-now.png\\" alt=\\"1st prototype of the StreamPipes UI\\"/>\\n\\n## Moving to the Apache Incubator\\n\\nEarlier this year, we discussed how to continue the development of StreamPipes. For the core team at FZI, our main goal\\nwas to widen the developer base, attract external developers and to make StreamPipes a real community-driven open source\\nproject.\\nWe had a look at various open source foundations (namely Apache, CNCF and Eclipse), but from the beginning, there was no\\ndoubt that we wanted to see StreamPipes in the Apache Software Foundation. Using a lot of Apache Big Data projects under\\nthe hood ([Apache Kafka](https://kafka.apache.org), [Apache Flink](https://flink.apache.org) and others), an emerging\\nApache IoT ecosystem, and the community-driven, open development process of ASF projects, this was an easy decision.\\nFinally, a few weeks before we went to ApacheCon North America in Las Vegas in September this year to talk about\\nStreamPipes, we discovered the awesome [Apache PLC4X](https://plc4x.apache.org) project, which perfectly aligns with\\nStreamPipes tackling the hard task to connect proprietary industrial protocols with modern software tooling.\\nWe met Chris Dutz together with other people from PLC4X and other Apache projects in Las Vegas and were overwhelmed by\\nthe _Apache Way_ and the great collaboration between the various projects within the ASF.\\n\\nSo after coming back home, we immediately started to write the proposal to enter the Apache Incubator, which got\\naccepted on 2019-11-11.\\n\\n## New project setup\\n\\nWith the great help from our mentors, we already performed some initial steps required to move our infrastructure over\\nto the ASF, which will continue during the next week:\\n\\n* The new website will be soon available under [https://streampipes.apache.org](https://streampipes.apache.org)\\n* We will move our code repositories over to the ASF on Github. Before that, we\'ll merge some repos to make future\\n  releases easier: The **backend and user interface** will be merged to the\\n  repository [https://www.github.com/apache/incubator-streampipes]([https://www.github.com/apache/incubator-streampipes).\\n  Pipeline elements and StreamPipes Connect adapters will also be merged to a new repo called **streampipes-extensions\\n  **, soon available\\n  at [https://www.github.com/apache/incubator-streampipes-extensions](https://www.github.com/apache/incubator-streampipes-extensions).\\n  Both **website and documentation** will be available\\n  at [https://www.github.com/apache/incubator-streampipes-website](https://www.github.com/apache/incubator-streampipes-website).\\n  Finally, the project **streampipes-installer**\\n  at [https://www.github.com/apache/incubator-streampipes-installer](https://www.github.com/apache/incubator-streampipes-installer)\\n  will contain the installer for Windows and OSX/Linux, the developer-oriented CLI tool and helm charts to install\\n  StreamPipes in Kubernetes.\\n* Apache project communication mainly relies on mailing lists. Subscribe to\\n  the [user list](mailto:users-subscribe@streampipes.apache.org)\\n  and [dev list](mailto:dev-subscribe@streampipes.apache.org) and help us to improve StreamPipes!\\n* Issues can be created in the new [Jira](https://issues.apache.org/jira/projects/STREAMPIPES).\\n* All previous releases will be marked as non-ASF-releases to clearly indicate that previous releases do not follow the\\n  Apache release policy. Yesterday, we released the final pre-Apache\\n  version [0.65.0](/docs/blog/2019/11/23/release-0650), the next release will be our first Apache release.\\n\\n## Thanks\\n\\nWe would like to thank Chris Dutz for his great support in doing the first steps in the Apache Incubator.\\n\\nWe would also like to thank our employee, [FZI Research Center for Information Technology](https://www.fzi.de/en), for\\nthe continued great support - starting from giving us the opportunity to present StreamPipes at large fairs such as\\nHannover Messe, over media support such as creating the great StreamPipes logo, up to the fast legal support we received\\nwhen we got accepted by the Apache Incubator.\\nIf you want to build cool stuff in a great applied research institute while pursuing a PhD at KIT, FZI is surely the\\nbest place to be ;-)\\n\\nLet\'s continue development and transform Apache StreamPipes (incubating) into the next Apache community!"},{"id":"/2019/11/23/release-0650","metadata":{"permalink":"/blog/2019/11/23/release-0650","source":"@site/blog/2019-11-23-release-0650.md","title":"StreamPipes release 0.65.0","description":"5 minutes to read","date":"2019-11-23T00:00:00.000Z","formattedDate":"November 23, 2019","tags":[],"readingTime":2.145,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"StreamPipes release 0.65.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"Moving to the Apache Incubator","permalink":"/blog/2019/11/25/moving-to-the-apache-incubator"},"nextItem":{"title":"StreamPipes release 0.64.0","permalink":"/blog/2019/09/19/release-0640"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nWe are happy to announce StreamPipes version 0.65.0! This release brings performance improvements related to the installation process and further reduces the minimum hardware requirements to run StreamPipes.\\n\x3c!--truncate--\x3e\\n\\n## Installation\\n\\nIf you\'re installing StreamPipes using the provided installer, you might have noticed that the initial setup takes some time: Docker images are downloaded, all dependent microservices are started and the RDF-based database that we use internally to store pipeline elements is initialized.\\nOn less-performant hardware, this process could take a few minutes. For this release, we optimized the installation process:\\n\\n* You don\'t need to provide your IP address during the installation process anymore - StreamPipes now runs without manually providing an IP address.\\n* A new initialization screen is shown in the StreamPipes user interface that automatically disappears and guides you to the setup process once all mandatory services are running.\\n* The setup process in the user interface should now be much faster due to some changes related to the caching of pipeline elements.\\n\\n## Lite version\\n\\nTo further reduce the minimum hardware requirements to run StreamPipes, we added a new Docker container to the backend that includes all data processors and sinks that depend on the lightweight JVM wrapper. Flink and other modules are excluded.\\nThis approach allows to test StreamPipes with less memory (e.g., on a laptop) while still having a larger set of pipeline elements installed.   \\nWe now recommend a minimum of 4GB RAM for the StreamPipes Lite version (make sure that the RAM is also assigned to Docker Desktop), but our tests have shown that the memory consumption of the StreamPipes lite version is around 2GB.\\n\\n## Pipeline Elements\\n\\n* 0.65.0 includes some new data processors: A CSV enrichment processors that allows to enrich events with metadata from CSV files, an event counter and some processors that perform operations on boolean values, e.g., coming from PLCs.\\n\\n## Other features and improvements\\n\\n* Use the latest Flink version 1.9.1\\n* We improved the OPC-UA adapter, e.g., you can now directly set the URL of the OPC-UA server.\\n* Proper error messages are now shown in the pipeline view in case something goes wrong during the start of a pipeline.\\n\\nSee the [release notes](https://github.com/apache/incubator-streampipes/releases/tag/0.65.0) for a complete list of new features and improvements.\\n\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!\\n\\nAnd do not forget to subscribe to our new mailing lists: https://streampipes.apache.org/mailinglists.html"},{"id":"/2019/09/19/release-0640","metadata":{"permalink":"/blog/2019/09/19/release-0640","source":"@site/blog/2019-09-19-release-0640.md","title":"StreamPipes release 0.64.0","description":"5 minutes to read","date":"2019-09-19T00:00:00.000Z","formattedDate":"September 19, 2019","tags":[],"readingTime":2.115,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"StreamPipes release 0.64.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"StreamPipes release 0.65.0","permalink":"/blog/2019/11/23/release-0650"},"nextItem":{"title":"StreamPipes release 0.63.0","permalink":"/blog/2019/09/05/release-0630"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nUsually, we try to publish a new StreamPipes release every three months. But after attending a very exciting [ApacheCon](https://www.apachecon.com/acna19/) last week, where we worked with some Apache communities on a few really cool new features, we decided to release these features as soon as possible.\\nSo here\'s StreamPipes 0.64.0!\\n\x3c!--truncate--\x3e\\n\\n## StreamPipes Connect\\n\\n* StreamPipes Connect now has a new (experimental) connector for [ApachePLC4X](https://plc4x.apache.org/). PLC4X is a (really cool) universal protocol adapter for the Industrial IoT with many adapters for systems like Modbus, Beckhoff, S7 and OPC-UA. The new StreamPipes Connect adapter allows you to easily connect to an S7 device, we will add more integrations in the upcoming releases.\\n* We added another adapter to retrieve data from the [Apache Pulsar](https://pulsar.apache.org) messaging system.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-09-19/spconnect.png\\" alt=\\"PLC4X adapter for StreamPipes Connect\\"/>\\n\\n## Pipeline Elements\\n\\n* 0.64.0 also includes a new data sink to send data to Apache Pulsar.\\n\\n## Deployment\\n\\nStreamPipes relies on a microservice-based architecture and therefore requires quite a few services (> 15 for the full version) to be up and running. \\nThis has impact on the memory consumption of the server where StreamPipes is running. On the other hand, we want to make it as easy as possible to try StreamPipes even on laptops with less powerful hardware. \\n\\nHowever, the lite version still required > 8G memory and the full version even more. Additionally, after the last release, we received feedback from the community indicating that the memory consumption has significantly increased.\\nSo we looked deeper into the issue and discovered that the Docker base images we were using to deliver the StreamPipes services caused high memory consumption.\\n\\nBefore StreamPipes 0.63.0, we used the Alpine Oracle JDK image for most services. In 0.63.0, we switched to an OpenJDK/Alpine distribution. This had an enormous effect on memory, having individual services that reserved more than 1.5GB of memory.\\n\\nSo in this version, we switched to AdoptOpenJDK along with [OpenJ9](https://www.eclipse.org/openj9/). The results are fantastic: The full version including all pipeline elements now needs only 6GB memory (compared to > 16 in the last version).\\n\\nThe screenshot below shows that StreamPipes now is much less resource hungry:\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-09-19/memory.png\\" alt=\\"PLC4X adapter for StreamPipes Connect\\"/>\\n\\nIn future versions, we will continue our efforts to decrease the memory consumption of StreamPipes.\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!"},{"id":"/2019/09/05/release-0630","metadata":{"permalink":"/blog/2019/09/05/release-0630","source":"@site/blog/2019-09-05-release-0630.md","title":"StreamPipes release 0.63.0","description":"5 minutes to read","date":"2019-09-05T00:00:00.000Z","formattedDate":"September 5, 2019","tags":[],"readingTime":3.835,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"https://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"StreamPipes release 0.63.0","author":"Dominik Riemer","authorURL":"https://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"StreamPipes release 0.64.0","permalink":"/blog/2019/09/19/release-0640"},"nextItem":{"title":"StreamPipes release 0.62.0","permalink":"/blog/2019/05/23/release-0620"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nStreamPipes version 0.63.0 has been released! Following our release plan to alternate between user-faced and backend-oriented releases, this release contains many (more than 70) features and improvements, mainly on the backend side.\\nThe new version is available on Docker Hub and can be downloaded using our [installer](https://github.com/apache/incubator-streampipes-installer).\\n\x3c!--truncate--\x3e\\n\\nFor this release, we focused on improving the stability and resilience of StreamPipes, adding many new features \\"under the hood\\".\\n\\n## Backend & Data Model\\n\\n* First, v0.63.0 brings **support for binary messaging formats**. Prior to 0.63.0, the only messaging format used at runtime was JSON. Now, several other binary formats are supported: Smile and CBOR as binary JSON representations and FST, a fast Java-based serializer.\\n* Second, we improved **resilience of pipelines**. Now, when StreamPipes is stopped, all running pipelines are stopped beforehand and can be restarted later on, so that you don\'t end up with orphaned pipelines anymore. \\n\\nWe also extended the data model and SDK with new features:\\n\\n* Pipeline elements can now provide their own assets such as documentation. Simply add an icon and a markdown file containing the documentation of the pipeline element and both will be visible directly in the pipeline editor after the installation of the pipeline element.\\n* We added several new static properties to define required user input: **SecretStaticProperties** can be used to define secret values (e.g., passwords). In addition, **StaticPropertyAlternatives** were introduced to let users select between multiple combinations of static properties (e.g., a time window and a count window along with window settings).\\n\\nIn addition, we migrated all pipeline element container and the backend to Spring Boot applications. The triple store used to store pipeline element descriptions has been extracted to an own microservice. Btw, have you seen the new [helm chart](https://www.github.com/streampipes/streampipes-helm-chart) that simplifies running StreamPipes on Kubernetes?\\n \\n## UI and Pipeline Editor\\nWe improved the **interactive user guide**, so that it now depends on pipeline elements that are also available in the lite version.\\nThree different interactive guides exist: One that teaches you how to create pipelines, another one that illustrates how to connect data with StreamPipes connect and a third one that shows how to create live visualizations using the built-in dashboard.\\n\\nAs **user feedback** is absolutely important to help us improving StreamPipes, we added a feature that allows users to directly give feedback from the StreamPipes UI. Simply click the feedback icon in the top navigation bar and submit your anonymous feedback to us! \\n\\nFinally, there are also some functional improvements in the pipeline editor: **Pipeline validation** has improved and gives direct feedback. And, finally, you can now also add multiple dashboards sink to a single pipeline :-)\\n\\nAnd a nice feature you can\'t see but which you\'ll probably feel: All UI files are now **Gzip compressed** by default, so that StreamPipes will now load much faster. \\n\\n## Pipeline Elements\\n\\nStreamPipes 0.63.0 includes several new pipeline elements:\\n* A sink for Apache IoTDB\\n* A sink for PostgreSQL\\n* A processor to convert boolean values\\n* A processor to extract timestamps\\n* A processor to compute trigonometric functions\\n\\n## StreamPipes Connect\\nWe added more adapters and improved some adapters to StreamPipes Connect:\\n\\n* An improved MQTT adapter that can handle authentication\\n* A new MySQL adapter\\n* An improved OPC-UA adapter\\n* A new random data generator that eases testing of pipeline elements\\n\\nIn addition, we completely reworked the Connect UI. The schema view now lets you edit events more conveniently and timestamp fields can be directly marked in the UI.\\n\\n\\n## Documentation\\nWe updated and restructured the user guide, which now consists of four parts: [Introduction](/docs/user-guide-introduction), [Tour](/docs/user-guide-tour), [Installation](/docs/user-guide-installation) and [First Steps](/docs/user-guide-first-steps).\\nWe also updated all screenshots to reflect the current look and feel of StreamPipes.\\n\\nIn addition, the developer guide was further extended (e.g., there is now a new tutorial on creating data sinks). Maven archetypes are now the recommended way to create new pipeline elements.\\n\\n\\n## Other features and improvements\\n\\n* An improved installer that lets you choose between two StreamPipes versions for different hardware setups (full or lite, previously named big data and desktop)\\n* We updated some core libraries like Apache Flink and Apache Kafka to newer versions.\\n* Improved support for Firefox and Edge: Besides Chrome, StreamPipes should also behave and look similar in Firefox and Edge browsers.\\n\\nSee the [release notes](https://github.com/apache/incubator-streampipes/releases/tag/0.63.0) for a complete list of new features and improvements.\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!"},{"id":"/2019/05/23/release-0620","metadata":{"permalink":"/blog/2019/05/23/release-0620","source":"@site/blog/2019-05-23-release-0620.md","title":"StreamPipes release 0.62.0","description":"6 minutes to read","date":"2019-05-23T00:00:00.000Z","formattedDate":"May 23, 2019","tags":[],"readingTime":2.89,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"http://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"StreamPipes release 0.62.0","author":"Dominik Riemer","authorURL":"http://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"StreamPipes release 0.63.0","permalink":"/blog/2019/09/05/release-0630"},"nextItem":{"title":"StreamPipes release 0.61.0","permalink":"/blog/2019/04/04/release-0610"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>6 minutes to read</div>**\\n<br/>\\n\\nStreamPipes version 0.62.0 has been released! While the last version brought many features under the hood, this new version totally focuses on features and improvements visible to end users.\\nThe new version is available on Docker Hub and can be downloaded using our [installer](https://github.com/streampipes/streampipes-installer).\\n\x3c!--truncate--\x3e\\n\\nFor this release, we focused on improving error handling in the pipeline editor, added more pipeline elements, added more adapters to StreamPipes Connect and, added a documentation on available pipeline elements.\\n\\n## Pipeline Elements \\nPipeline elements are the most important part of the StreamPipes toolbox. Although pipeline elements can be easily developed using our SDK, we aim to provide as many ready-to-use elements as possible to provide you with meaningful data harmonization and analytics features right from the beginning.\\nStreamPipes v0.62.0 brings many new data processors and data sinks, an overview can be found [here](/docs/pipeline-elements). \\n\\n## Pipeline Editor\\nTo better support users while developing pipelines, we improved the verification of user input in the pipeline editor.\\nUsers now get hints (directly shown in the pipeline assembly) on missing pipeline elements and error messages are shown if invalid values are entered while configuring pipeline elements (see the screenshot below).\\nIn addition, the editor now disallows adding new pipeline elements until the active pipeline element is fully configured, otherwise, the element is marked with a red alert symbol, which makes it much easier to discover modeling errors.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-05-23/pipeline-editor.png\\" alt=\\"Pipeline Element Verification\\"/>\\n\\nOne feature request which was coming from one of our users was to better understand what pipeline elements are doing. For that reason, we now added a feature that allows to see a full documentation of any pipeline element directly in the pipeline editor.\\nOnce users start to configure a new pipeline element, the documentation can be opened:\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-05-23/pipeline-element-documentation.png\\" alt=\\"Pipeline Element Documentation\\"/>\\n\\n\\n## StreamPipes Connect\\nWe added more adapters to StreamPipes Connect. \\nBesides generic adapters such as frequently used protocols like OPC UA, MQTT and Kafka, Connect now also includes some new open data adapters and adapters for web APIs to make starting with StreamPipes more funny and easier:\\n\\n* A Slack source to connect Slack channels with StreamPipes\\n* A Coindesk sources that allows you to get the latest Bitcoin rates\\n* A Wikipedia sources to get latest edits and created articles from Wikipedia\\n* IEXCloud adapters to provide access to stock quotes and news from IEXCloud (an API token is required).\\n* A ROS source to access data from the Robot Operating System (ROS)\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-05-23/connect.png\\" alt=\\"StreamPipes Connect\\"/>\\n\\n\\n## Documentation\\nThe documentation for pipeline elements that is shown in the pipeline editor is now also available in the online documentation.\\nNavigate to [pipeline elements](/docs/pipeline-elements) to see an overview of all pipeline elements that are currently provided by StreamPipes.\\n\\n## Other features and improvements\\n\\n* Adapters can be sorted and filtered in StreamPipes Connect.\\n* Labels and descriptions of pipeline elements can be provided by external resources files as a first step towards internationalization.\\n* We upgraded the UI to the latest Angular version 7 and drastically reduced the size of the UI source bundle, which reduces loading time.\\n* Stream requirements are now correctly ordered\\n\\nSee the [release notes](https://github.com/streampipes/streampipes/releases/tag/0.62.0) for more details.\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!"},{"id":"/2019/04/04/release-0610","metadata":{"permalink":"/blog/2019/04/04/release-0610","source":"@site/blog/2019-04-04-release-0610.md","title":"StreamPipes release 0.61.0","description":"5 minutes to read","date":"2019-04-04T00:00:00.000Z","formattedDate":"April 4, 2019","tags":[],"readingTime":3.555,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"http://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"StreamPipes release 0.61.0","author":"Dominik Riemer","authorURL":"http://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"StreamPipes release 0.62.0","permalink":"/blog/2019/05/23/release-0620"},"nextItem":{"title":"ContainerCLI: A CLI tool for your Docker Application","permalink":"/blog/2018/11/24/container-cli"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nWe are proud to release StreamPipes version 0.61.0, which brings many improvements and some exciting new features that simplify pipeline development!\\nThe new version, which is already available on Docker Hub and can be downloaded using our [installer](https://github.com/streampipes/streampipes-installer) brings over 20 improvements. Under the hood, a reworked event model simplifies the development of new pipeline elements using the built-in SDK.\\n\x3c!--truncate--\x3e\\n\\nOur main mission is to make IoT data management & analytics accessible to everyone.\\nThis release focuses on better integrating StreamPipes with other systems and data sources and contains UX improvements to ease the development of pipelines.\\n\\n## StreamPipes Connect\\nStreamPipes Connect, which aims to easily connect arbitrary data sources with StreamPipes, has been first introduced as a public beta in version 0.60.0.\\nVersion 0.61.0 brings many new features to Connect and also implements many bug fixes that now make Connect the recommended way to connect data sources.\\n\\nStreamPipes Connect relies on an extensible architecture to connect either generic protocols or specific adapters.\\n\\nIn more detail, StreamPipes Connect supports the following protocols, with a completely code-free integration process:\\n\\n* Data Streams\\n    * HTTP/REST\\n    * MQTT\\n    * Apache Kafka\\n    * File\\n    * ROS (preview)\\n    * GDELT\\n\\n* Data Sets\\n    * HTTP/REST\\n    * HDFS\\n    * File\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-04-04/connect.png\\" alt=\\"StreamPipes Connect\\"/>\\n\\nThe next version will also include an adapter for OPC UA, which is currently being tested in a real setting.\\n\\nFor protocols that are not yet supported by StreamPipes Connect, a new Maven archetype for easily connecting data sources using the [SDK](/docs/dev-guide-tutorial-sources) is provided.\\n\\n## Improved Pipeline Modeling\\n\\nOn the UI side, we try to make the graphical modeling of pipelines as simple as possible. Besides some minor improvements (e.g., case-insensitive search for pipeline elements), pipelines are now constantly validated and users get feedback on steps that are still missing (e.g., missing pipeline elements).\\nAs many other features we are currently implementing, this feature directly comes from a user request - so if you have any suggestions for improvement, let us know!\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2019-04-04/validation.png\\" alt=\\"Pipeline Validation\\"/>\\n\\n\\n## Reworked Event Model\\n\\nOne of the most important features of v0.61.0 is not directly visible to end users, but drastically eases the development of new pipeline elements with the SDK.\\nFrom this release on, events at runtime are represented in form of a new ``Event Object`` instead of the former ``Map`` representation.\\nThis feature allows us for much better support of complex data processors which have more than one input data stream and comes with many convenience methods to better extrat fields from an event for processing.\\n\\nFor instance, prior to v0.61.0 you had to extract fields from an incoming events as follows:\\n\\n```java\\n@Override\\n  public void onEvent(Map<String, Object> in, String s, SpOutputCollector out) {\\n       Integer numberValue = Integer.parseInt(String.valueOf(in.get(MAPPING_PROPERTY_ID));\\n  }\\n```\\n\\nThe new event model is much simpler and less error-prone:\\n\\n```java\\n public void onEvent(Event in, SpOutputCollector out) throws SpRuntimeException {\\n    Integer numberValue = in\\n        .getFieldBySelector(MAPPING_PROPERTY_SELECTOR)\\n        .getAsPrimitive()\\n        .getAsInteger();\\n  }\\n```\\n\\nThe new event model is even more useful in cases where your data streams have a complex nested structure or contain list fields.\\nIf you connect two data streams containing the same fields to a processor, field names are automatically renamed in the background to avoid naming conflicts.\\nA complete guide can be found in the [developer guide](/docs/dev-guide-event-model).\\n\\n## Documentation\\n\\nThe developer guide has been extended:\\nBesides reworked tutorials on developing new data processors and data sources, the new documentation includes instructions on adding [stream requirements](/docs/dev-guide-stream-requirements), the new [event model](/docs/dev-guide-event-model), and in-depth guides on defining [static properties](/docs/dev-guide-static-properties) and [output strategies](/docs/dev-guide-output-strategies).\\n\\n## Other features and improvements\\n\\n* SSL support: The UI can now be configured to support SSL, see the [documentation](/docs/dev-guide-ssl) on required configurations in your docker-compose file.\\n* A new map visualization to visualize spatial data streams\\n* The customize dialog is now hidden in case no static properties are present\\n* Adapter descriptions can be exported and imported\\n* The UI does no longer load any external sources\\n* Updated Maven archetypes\\n\\nSee the [release notes](https://github.com/streampipes/streampipes/releases/tag/0.61.0) for more details.\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!"},{"id":"/2018/11/24/container-cli","metadata":{"permalink":"/blog/2018/11/24/container-cli","source":"@site/blog/2018-11-24-container-cli.md","title":"ContainerCLI: A CLI tool for your Docker Application","description":"6 minutes to read","date":"2018-11-24T00:00:00.000Z","formattedDate":"November 24, 2018","tags":[],"readingTime":3.91,"hasTruncateMarker":true,"authors":[{"name":"Philipp Zehnder","url":"http://twitter.com/philipp10der","imageURL":"/img/zehnder.png"}],"frontMatter":{"title":"ContainerCLI: A CLI tool for your Docker Application","author":"Philipp Zehnder","authorURL":"http://twitter.com/philipp10der","authorImageURL":"/img/zehnder.png"},"prevItem":{"title":"StreamPipes release 0.61.0","permalink":"/blog/2019/04/04/release-0610"},"nextItem":{"title":"Preview: StreamPipes release 0.60.0","permalink":"/blog/2018/09/17/preview-060"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>6 minutes to read</div>**\\n<br/>\\n\\nIn this blog post, we show how we developed a CLI tool to install and manage StreamPipes.\\nIn addition, we present a template project that enables you to easily create a CLI tool for your own docker application.\\nAll you need is a working docker-compose.yml file.\\n\\n\x3c!--truncate--\x3e\\n\\nStreamPipes has a Microservice architecture and we use Docker and Docker Compose for all of our development, testing, and deployment processes.\\nIn the beginning, we developed the CLI only to ease the installation process (e.g. managing multiple versions), but over time we realized that the tool is much more powerful.\\nFor example, StreamPipes has multiple developer roles: Some developers are working on the frontend, others on the backend, and some are developing new algorithms and data sinks for StreamPipes.\\nIn the figure below, you can see different configurations that are used by different developers.\\nAll services are running in docker, except for the ones the developer is currently working on.\\nAs a result, we had many different docker-compose.yml files and when we made changes, we had to synchronize them all.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'60%\'}} src=\\"/img/blog/2018-11-24/roles.png\\" alt=\\"Three different developer roles\\"/>\\n\\nTherefore, our goal was to speed up the setup of a development environment, so that developers can focus on their specific programming task.\\nThat\u2019s why we developed a command line tool that automates the setup of different environments.\\nAll what is needed is a docker-compose.yml file that describes all services of the application and the template CLI project from [GitHub](https://github.com/streampipes/container-cli).\\nAfterwards, you need to split up your compose file and create an individual file for each service. Put those files in individual folders in the services folder.\\nEach folder should have the same name as the service name in the docker-compose file. That\u2019s it!\\nNow you can use the CLI.\\nWith the default commands you are able to start, stop, and configure the application. But how is this better than just using docker itself?\\nThe advantage is the flexibility and extensibility of the tool.\\nYou can extend the script with tasks you have to perform regularly, like cleaning up volumes, or setting up testing environments.\\n\\n\\nIn the following we will describe the tool in more detail.\\nYou can see all files and folders of the CLI Tool in the next listing.\\nThe first file \u201ccontainer-cli.m4\u201d contains the script.\\nWe use [Argbash](https://argbash.io/), which eases the use of bash script parameters and flags.\\nIn this file you can easily add new custom commands, flags or other functionalities.\\nThe next file is the actual bash script. It is generated by argbash.\\nSince this file is generated automatically, you should not change anything.\\nThe docker-compose.yml file is the main file.\\nThis should contain all services, networks, or volume information that is relevant for all the other services of your application.\\nAll your other services are located in the services folder.\\nFor each service, create a folder with the name of the service and place a docker-compose.yml in the folder configuring the service.\\nTherefore, you can copy and paste the configuration from your current docker-compose.yml.\\nThe script checks the services folder dynamically, this means you can add services at a later point in time without changing anything else.\\nIn our example, we have four services: Backend, UI, database, and a test database containing data for the end2end tests.\\nWhich services should be started when running the command **\\"container-cli start\\"** is defined in the active-service file.\\nThis file contains the names of all services, each in one line, that should be started.\\nOften it is required to have multiple configurations of your app. You can save them in the templates folder.\\nBy running **\u201ccontainer-cli set-template ui_developer\u201d**, you can select the template ui_developer.\\nWith this command, all services defined in the template are written to the active-services file. (e.g. the ui_developer template contains just the database and backend and the e2e-test template contains the backend, ui, and test-database).\\n\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'30%\'}} src=\\"/img/blog/2018-11-24/files.png\\" alt=\\"Structure of the containter cli project\\"/>\\n\\n\\nThe last file is the tmpl_env file.\\nIt contains configuration variables for the individual services.\\nThose variables can also be changed by the bash script dynamically, because the tmpl_env file is moved to the .env file in the same folder.\\nWe use the configuration for example to dynamically set the IP Address of the host system or set the application version.\\nTo use a variable in a docker-compose file just write it in braces, as shown below.\\n\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2018-11-24/variables.png\\" alt=\\"How to use Environment Variables\\"/>\\n\\nWe hope this tool is helpful for your use case.\\nWhen you have any problems, feedback, or ideas for improvements, contact us or open an issue on [GitHub](https://github.com/streampipes/container-cli)."},{"id":"/2018/09/17/preview-060","metadata":{"permalink":"/blog/2018/09/17/preview-060","source":"@site/blog/2018-09-17-preview-060.md","title":"Preview: StreamPipes release 0.60.0","description":"5 minutes to read","date":"2018-09-17T00:00:00.000Z","formattedDate":"September 17, 2018","tags":[],"readingTime":3.38,"hasTruncateMarker":true,"authors":[{"name":"Dominik Riemer","url":"http://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Preview: StreamPipes release 0.60.0","author":"Dominik Riemer","authorURL":"http://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"ContainerCLI: A CLI tool for your Docker Application","permalink":"/blog/2018/11/24/container-cli"},"nextItem":{"title":"How to understand your machine data?","permalink":"/blog/2018/06/18/how-to-understand-your-machine-data"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>5 minutes to read</div>**\\n<br/>\\n\\nIt\'s been a while since our last blog post. However, in the background we are working hard to release the next version of StreamPipes which is currently in the final phase.\\nIn this post, we\'d like to give you a preview of the upcoming StreamPipes version 0.60.0, which brings many new features and improvements.\\n\\n\x3c!--truncate--\x3e\\n\\nOur first public release is now about 6 months ago. In the meantime, we gathered lots of feedback we got from users concerned with the installation, available pipeline elements and usability.\\nWe learned what users expect from the tool and really tried to implement feature suggestions from the community.\\n\\nHere are the major things you\'ll find in the next version which will be released by the end of September:\\n\\n## Installation and first-time usage\\nWe aim to make it as easy as possible for first-time users to try and test StreamPipes. Although we have provided Docker images and a docker-compose file from the beginning, we\'ve learned that our target group looks for an easier way to install the tool, without the need to manually configuring things like ports or hostnames.\\nFor that reason, we have implemented an installer that is already on [Github](https://www.github.com/streampipes/streampipes-installer). With the next release, you\'ll find an even easier installer along with a dev-installer targeted at more advanced users that allows to configure the services and pipeline element containers you\'d like to use in your StreamPipes instance.\\n\\nIn addition, we wanted to provide better support for users that are trying to build a pipeline for the first time. Although we provide a tour and a user guide, we are aware that nobody likes reading documentations ;-)\\nTherefore, the next release includes an interactive product tour that guides you through the first steps with StreamPipes and explains how to build pipelines - right in the pipeline editor!\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2018-09-17/streampipes-060-product-tour.png\\" alt=\\"Product Tour\\"/>\\n\\n## StreamPipes Connect\\n\\nAlthough the SDK provides a developer-oriented way to connect new data sources, many users have asked us to provide an easier way to connect sources and data streams to StreamPipes.\\nThe next release includes a beta release of StreamPipes Connect. Connect is a major effort that integrates work we\'ve done over the past year and provides an easy way to integrate your data streams right from the UI.\\nA data marketplace contains a list of pre-defined adapters (which can be rather generic by selecting a protocol and a data format or quite specific as, e.g., an openSenseMap source).\\nThese adapters can be configured according to your needs and directly started on a set of worker nodes.\\n\\nStreamPipes Connect also lays the foundation for some cool new features that make it even easier to connect sources and will be added over the next months.\\nIn addition, pre-processing features will be integrated that will support edge computing use cases.\\n\\nBe aware that StreamPipes Connect will be released in a rather early version, so don\'t use it for production yet.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'90%\'}} src=\\"/img/blog/2018-09-17/streampipes-060.png\\" alt=\\"StreamPipes Connect\\"/>\\n\\n## Pipeline Elements\\n\\nPipeline elements (data processors and sinks) are the part of StreamPipes that generate added-value.\\nWhile the first release contained a set of around 10 pipeline elements, the next release will provide many new elements that are already integrated.\\nNew elements will include pattern detection algorithms, geospatial operators, image processing algorithms (e.g., a generic classifier) and even a Slack sink!\\n\\nIn total, the next version includes more than 40 pipeline elements and we will add many more during the next months.\\nThe new pipeline elements are already available on [Github](https://www.github.com/streampipes/streampipes-pipeline-elements) and will be released as Docker images by the end of September.\\n\\n## Other features and improvements\\n\\n* A new wrapper for the [Siddhi](https://github.com/wso2/siddhi) CEP engine\\n* various bug fixes and stability improvements\\n* many UX improvements\\n* many more, stay tuned for the next blog post!\\n\\n## Feedback\\n\\nWe are absolutely open to your suggestions for further improvements! Let us know (by [mail](mailto:feedback@streampipes.org), [slack](https://slack.streampipes.org) or [twitter](https://www.twitter.com/streampipes)) and we\'ll consider your feature request in the next release!"},{"id":"/2018/06/18/how-to-understand-your-machine-data","metadata":{"permalink":"/blog/2018/06/18/how-to-understand-your-machine-data","source":"@site/blog/2018-06-18-how-to-understand-your-machine-data.md","title":"How to understand your machine data?","description":"8 minutes to read","date":"2018-06-18T00:00:00.000Z","formattedDate":"June 18, 2018","tags":[],"readingTime":6.7,"hasTruncateMarker":true,"authors":[{"name":"Philipp Zehnder","url":"http://twitter.com/philipp10der","imageURL":"/img/zehnder.png"}],"frontMatter":{"title":"How to understand your machine data?","author":"Philipp Zehnder","authorURL":"http://twitter.com/philipp10der","authorImageURL":"/img/zehnder.png"},"prevItem":{"title":"Preview: StreamPipes release 0.60.0","permalink":"/blog/2018/09/17/preview-060"},"nextItem":{"title":"Welcome to StreamPipes!","permalink":"/blog/2018/06/14/welcome"}},"content":"**<div style={{float: \'left\', paddingRight: \'40px\'}}>8 minutes to read</div>**\\n<br/>\\n\\n\\nData is the new oil. Probably everybody of you has heard or read this sentence before.\\nIt is often stated how important data and data understanding is for companies today.\\nBut what does this actually mean?  How does the data look like that is produced by your machines and systems?\\nAnd how can we solve the big challenge to turn this raw data into insights that can be understood by humans?\\n\\n\x3c!--truncate--\x3e\\n\\nWhen it comes to data analytics people often talk about the big players like Google, Facebook, or Netflix which collect a lot of data about their users and their usage behavior.\\nThe core of their business model is to use data and turn it into profit. Nowadays all companies have the requirement to analyze their data.\\nBut since this was not originally part of their business model it is very challenging for them to catch up.\\nTo gain insights from data, it is often referred to advanced analytics and machine learning. Before such techniques can be used some work must be done.\\nA first, basic part of that is to understand your data. We do that in four steps, as can be seen in figure below.\\nFirst data sources must be accessed, then they can be integrated and for example be stored in a data lake.\\nAfter that, we employ rule-based analytics to find patterns and situations.\\nIn the end, machine learning and advanced analytics algorithms can be used to get more out of the data.\\nThe idea behind those steps is to generate value as early as possible by collecting the low-hanging fruits first.\\nWe develop methodologies and tools for the individual steps to also allow domain experts to perform them to bridge the gap between the big tech companies and more traditional industries.\\n\\n<img className=\\"blog-image\\" style={{maxWidth: \'50%\'}} src=\\"/img/blog/2018-06-18/01_motivation.png\\" alt=\\"Motivation Graphic\\"/>\\n\\nThe questions we try to answer in these blog posts are:\\n\\n* **How does data produced by machines look like?**\\n* **How can machines and other data sources be accessed?**\\n* **How is it possible to process the continuously produced flow of data?**\\n\\nWe illustrate our ideas with an example which we also use during the whole blog series.\\nThe example is a water circle of a cooling system. You can see such a system in the next image.\\nIt contains multiple water tanks and pipes that connect those tanks.\\nWithin the tanks and the pipes are multiple sensors, which measure for example the water level in the tank, the flow rate in the water pipe, or the temperature of the water.\\nAll those sensors are very simple, they make iterative observations and send the sensed measurements to a computer system.\\n\\n<img class=\\"blog-image\\" style={{maxWidth: \'70%\'}} src=\\"/img/blog/2018-06-18/02_anlage.png\\" alt=\\"Water Circle Image\\"/>\\n\\nBefore we go into detail, we want to explain the term streaming data, because we focus on machine and sensor data which is continually produced in a streaming fashion.\\nThe opposite of streaming data are fixed sized data sets, called batch data.\\nSince always new data is produced by sensors, it is not possible to wait till all data is completely produced and then process it.\\nDifferent to that is batch data.\\nThe advantage of batch data is, when the processing starts no new data is added anymore.\\nStreaming data can also be processed with batch processing systems.\\nTherefore, a data stream must be separated into fixed chunks which are then processed in a batch fashion.\\nThis is possible but the more natural fit is to use streaming systems since they were designed to process streaming data.\\n\\nIn an environment where we process machine data we have different components.\\nThe individual components exchange information in the form of **events**.\\nAll assets continually producing data are called **data sources** (i.e. a sensor, machine or a software system).\\nTo access these data sources, **adapters** are needed.\\nAdapters are software components (which can run anywhere, for example directly on the machine or separately on a edge device near the machine) that are able to connect to the data source, extract the sensor information and emit events to the **middleware**.\\nThe middleware is a central component which is an intermediate between the individual components.\\nEven if the middleware is a central component, it is not a bottleneck and also not a single point of failure since it is often realized in form of a distributed system.\\n**Processing systems** can access data from the middleware, transform it and apply algorithms.\\nThis is the component where the data is analyzed and higher-level information is generated.\\nIn the end, results can be stored in **data bases**.\\nFrom there, other applications like for example dashboards can access the calculated results.\\nThis is the high-level architecture of processing data streams.\\n\\n<img class=\\"blog-image\\" src=\\"/img/blog/2018-06-18/03_architecture.png\\" alt=\\"Overall architecture\\"/>\\n\\nOnce the events are integrated into a middleware, it must be processed to detect situations and generate higher-level events.\\nThis can be done in an **Event Processing Network (EPN)**.\\nAn EPN consists of one or multiple **data sources, event processors** transforming and detecting patterns in the data and finally **data sinks**, which can be data bases, alarms or other systems.\\nBelow such a pipeline is shown where we have two sensors as data sources: A flow rate sensor measuring the flow rate in a water pipe and a water level sensor in a water tank.\\nIt further contains three processing elements, each with a different functionality.\\nThe first one detects increases in the water tank, the second one filters out values under a defined threshold.\\nThe last of the processing elements detects when both situations occur within a defined time window.\\nIn the end, we employ a data sink, which triggers a notification for a service technician once the modeled situation occurs.\\nWe call such instances of EPNs processing **pipelines**.\\n\\n<img class=\\"blog-image\\" src=\\"/img/blog/2018-06-18/04_pipeline.png\\" alt=\\"Example Pipeline\\"/>\\n\\nThe pipeline in the image before contains three different processing elements.\\nThose elements contain the actual algorithms.\\nSuch algorithms can be as easy as simple filters on a sensor value or can also be more complex, such as patterns that occur over a period of time.\\nBut they can also contain machine learning and advanced analytics algorithms (e.g. neural networks) that perform predictions on data streams.\\nEvent processors are just an abstraction that take a data stream as an input and expose a \u201cnew\u201d data stream.\\nFurthermore, they contain configuration parameters which can be defined by a user.\\nWith this concept, we can create reusable components that can be used in many different pipelines.\\n\\nThe goal of StreamPipes is to enable domain experts to do their data analysis themselves by providing tooling, where such processing pipelines can be modeled in a graphical user interface and then executed automatically without the need of an IT expert.\\nProcessing engines which are used as the basis of the processing elements in our solution often require a higher technological understanding.\\nIf this understanding is available, they can also be used on their own.\\nWe use such systems, like Apache Flink, Apache Spark or the brand-new KSQL by Confluent, for the processing but provide an abstraction over them to enable domain experts to model pipelines themselves.\\nThis has also the advantages that individual runtime solutions can be exchanged over time.\\nFurthermore, we provide a semantic layer for all elements, including data sources, processing elements, and data sinks.\\nWith that layer, our system is capable of understanding the meaning and further support the user to ensure that just semantically correct pipelines are created.\\n\\nIn this first blog post of our series, we gave a first introduction how data produced by machines and systems can be analyzed and value can be generated out of it.\\nIn the following blog posts we explain the individual parts in more detail to provide you with enough knowledge to start analyzing your own data.\\n\\n* **[Part 1: Overview](/docs/blog/2018/06/18/how-to-understand-your-machine-data)**\\n* Part 2: Data Sources\\n* Part 3: Data Processing Elements\\n* Part 4: Data Sinks\\n* Part 5: Putting it all together (Example Pipeline)\\n* Part 6: Practical Tips"},{"id":"/2018/06/14/welcome","metadata":{"permalink":"/blog/2018/06/14/welcome","source":"@site/blog/2018-06-14-welcome.md","title":"Welcome to StreamPipes!","description":"Welcome to our new blog. StreamPipes is the new, easy-to-use self-service data analytics toolbox for the Industrial IoT. In the coming weeks, we\'ll publish a series of blog posts that explain some ideas of StreamPipes. You\'ll read about use cases, best practices as well as technical details.","date":"2018-06-14T00:00:00.000Z","formattedDate":"June 14, 2018","tags":[],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Dominik Riemer","url":"http://twitter.com/dominikjriemer","imageURL":"/img/riemer.png"}],"frontMatter":{"title":"Welcome to StreamPipes!","author":"Dominik Riemer","authorURL":"http://twitter.com/dominikjriemer","authorImageURL":"/img/riemer.png"},"prevItem":{"title":"How to understand your machine data?","permalink":"/blog/2018/06/18/how-to-understand-your-machine-data"}},"content":"Welcome to our new blog. StreamPipes is the new, easy-to-use self-service data analytics toolbox for the Industrial IoT. In the coming weeks, we\'ll publish a series of blog posts that explain some ideas of StreamPipes. You\'ll read about use cases, best practices as well as technical details.\\n\\nStay tuned!"}]}')}}]);