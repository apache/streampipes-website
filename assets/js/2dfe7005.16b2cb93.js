"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83020],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,u=d["".concat(l,".").concat(m)]||d[m]||h[m]||s;return n?i.createElement(u,o(o({ref:t},p),{},{components:n})):i.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:a,o[1]=r;for(var c=2;c<s;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=n(87462),a=n(63366),s=(n(67294),n(3905)),o=["components"],r={id:"user-guide-tour",title:"Tour",sidebar_label:"Tour"},l=void 0,c={unversionedId:"user-guide-tour",id:"version-0.97.0/user-guide-tour",title:"Tour",description:"StreamPipes is a framework that enables domain experts to model and execute stream processing pipelines in a big data infrastructure.",source:"@site/versioned_docs/version-0.97.0/user-guide-tour.md",sourceDirName:".",slug:"/user-guide-tour",permalink:"/docs/user-guide-tour",draft:!1,tags:[],version:"0.97.0",lastUpdatedBy:"Philipp Zehnder",lastUpdatedAt:1739799205,formattedLastUpdatedAt:"Feb 17, 2025",frontMatter:{id:"user-guide-tour",title:"Tour",sidebar_label:"Tour"}},p={},d=[{value:"Home",id:"home",level:2},{value:"Pipeline Editor",id:"pipeline-editor",level:2},{value:"Connect new Data Sources",id:"connect-new-data-sources",level:2},{value:"Manage Pipelines",id:"manage-pipelines",level:2},{value:"Live Dashboard",id:"live-dashboard",level:2},{value:"File Download",id:"file-download",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Install Pipeline Elements",id:"install-pipeline-elements",level:2},{value:"My Elements",id:"my-elements",level:2},{value:"Configuration",id:"configuration",level:2}],h={toc:d},m="wrapper";function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,s.kt)(m,(0,i.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"StreamPipes is a framework that enables domain experts to model and execute stream processing pipelines in a big data infrastructure.\nThe graphical user interface of StreamPipes is a web application that provides an easy to use solution for domain experts.\nIn this page, an overview of the many features of StreamPipes is given. We will tour through all features and explain what they do and how users can interact with them."),(0,s.kt)("p",null,"First of all, a user needs to log in to the system.\nThe credentials for the user are specified during the installation process."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"StreamPipes Login",src:n(47473).Z,width:"1200",height:"720"})," "),(0,s.kt)("h2",{id:"home"},"Home"),(0,s.kt)("p",null,"After logging in, the user is redirected on to the home page.\nThe home page gives an overview over the different features available in the StreamPipes UI."),(0,s.kt)("p",null,"On the left, the navigation menu can be seen.\nYou can either use the icons on the left side or click on the menu icon on the\ntop left to open the details view of the navigation menu."),(0,s.kt)("p",null,"On the top right, a link refers to the documentation and the logout button is present."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/home/home.png",alt:"Home"}),(0,s.kt)("img",{src:"/img/features_0_62_0/home/open_menu.png",alt:"Open Menu"})),(0,s.kt)("h2",{id:"pipeline-editor"},"Pipeline Editor"),(0,s.kt)("p",null,"The first feature we are going to explain is the Pipeline Editor.\nThis is one of the central features of StreamPipes, since graphical modeling of pipelines takes place in this view."),(0,s.kt)("p",null,"On the top we can see four tabs: ",(0,s.kt)("strong",{parentName:"p"},"Data Sets"),", ",(0,s.kt)("strong",{parentName:"p"},"Data Streams"),", ",(0,s.kt)("strong",{parentName:"p"},"Processing Elements"),", and ",(0,s.kt)("strong",{parentName:"p"},"Data Sinks"),".\nEach tab contains multiple pipeline elements, which can be installed at runtime.\nThe installation of pipeline elements is explained later in section ",(0,s.kt)("a",{parentName:"p",href:"/docs/user-guide-tour#install-pipeline-elements"},"Install Pipeline Elements"),"."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/editor/2_PipelineEditor_DataStreams.png",alt:"Data Streams"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/3_PipelineEditor_DataProcessors.png",alt:"Processing Elements"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/4_PipelineEditor_DataSinks.png",alt:"Data Sinks"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/1_PipelineEditor_DataSets.png",alt:"Data Sets"})),(0,s.kt)("p",null,"There are multiple ways to search for a pipeline element.\nThe easiest way is to enter a search term in the search field on the top left corner.\nThe system filters the elements according to the search term and only presents the relevant ones.\nAnother way is to select one of the categories from the drop down menu.\nThe system then filters the elements according to the selected category.\nThe category of an element is defined by its functionality."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/editor/5_text_filter.png",alt:"Text Filter"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/6_category_drop_down.png",alt:"Category Drop Down"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/7_category_filter.png",alt:"Category Filter"})),(0,s.kt)("p",null,"Modelling of a pipeline starts with choosing one ore more data sources. Therefore a data stream or data set must be selected\nand moved into the editor via drag and drop.\nAfter adding a data stream, we can select a processing element to transform the events of the data stream.\nThis is done again by dragging the processing element icon into our editor.\nThe mouse can be used to connect the two elements.\nIt is automatically checked in the background if the two elements are semantically compatible.\nIf this check is successful, a configuration menu is shown. It contains the parameters that can be modified by the\nuser. For all parameters, a description is provided and the system also prevents the user from entering parameters that\nare not correct, according to the semantic description of the element.\nIt is also ensured that all required parameters are provided by the user, otherwise an error message is displayed."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/editor/8_connect_elements.png",alt:"Connect Elements"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/9_configure_element.png",alt:"Configure Elements"})),(0,s.kt)("p",null,"When the user tries to connect two elements that are not compatible, the system shows a ",(0,s.kt)("strong",{parentName:"p"},"connection error")," message.\nThe example illustrated below shows such a case. The user tried to connect a text filter to a light sensor.\nThis is not possible since the text filter processing element requires at least one event property of type string, which is not provided by the light sensor."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Connection Error",src:n(17960).Z,width:"1920",height:"1121"})," "),(0,s.kt)("p",null,"To further improve the usability, multiple ways are available to connect new elements besides the drag and drop option.\nEach processing element has multiple short-cut buttons to connect it with another element.\nThe first one (eye icon) can be used to get a suggestion of all elements that are compatible with the current element.\nThe second one (plus icon) gives a recommendation on the elements the user might want to connect, based on the usage of the component in\nother pipelines.\nThere is also a button (question tag icon) to open the documentation of a selected element.\nElements can be deleted by clicking the 'delete' button.\nEach element can also be re-configured at a later point in time using the configuration button.\nThere is one important aspect about re-configuration of pipeline elements you need to be aware of: Only elements that are not yet connected to another element can be modified.\nThe reason for this behaviour is that some of the following elements might rely on the configuration of previous elements.\nThis way it is ensured that the user can not change the behaviour of the pipeline by accident."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/editor/11_shortcut_buttons.png",alt:"Shortcut Buttons"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/12_compatible_elements.png",alt:"Compatible Elements"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/13_recommend_elements.png",alt:"Recommended elements"})),(0,s.kt)("p",null,"After the pipeline is completely modelled, the editor looks similar to the first image below.\nEspecially for larger pipelines, the auto layout button in the editor menu might be helpful.\nWith this button, the pipeline will be beautifully aligned in the editor, helping users to get a better overview of the complete pipeline.\nOn the top left corner of the editor, the 'save' button can be found.\nAfter the modelling of the pipeline is done, use this button to save and execute the pipeline.\nA save dialogue pops up when clicking the save button.\nThe pipeline title must be entered and an additional description can be provided.\nIt is recommended to always provide a description, because it makes it easier for other users to understand the meaning of the pipeline.\nIn the save menu, the user can either just store the pipeline configuration or store it and immediately start the pipeline.\nOnce the pipeline is executed, the user is redirected to the ",(0,s.kt)("em",{parentName:"p"},"Manage Pipeline")," view.\nIn this view, the user gets immediate feedback whether all components did start correctly and the pipeline is up and running.\nThis view also shows that individual elements might run in different environments on different servers.\nIf there is an error during the execution, a notification containing a (hopefully) detailed error description is provided in this view."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/editor/14_save_adjust.png",alt:"Save adjust delete"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/15_save_dialogue.png",alt:"Complete pipeline"}),(0,s.kt)("img",{src:"/img/features_0_62_0/editor/16_pipeline_sucessfully_started.png",alt:"Pipeline sucessfully started"})),(0,s.kt)("h2",{id:"connect-new-data-sources"},"Connect new Data Sources"),(0,s.kt)("p",null,"With StreamPipes Connect it is possible to connect new data sources in StreamPipes with just a few clicks.\nTherefore, we provide a marketplace with a lot of different adapters that can be configured and executed to create new ",(0,s.kt)("strong",{parentName:"p"},"Data Streams")," in the ",(0,s.kt)("strong",{parentName:"p"},"Pipeline Editor"),".\nWith StreamPipes Connect it is possible to connect specific data sources - e.g. an adapter streaming the current location of the ISS (International Space Station).\nIt is also possible to connect generic sources like message brokers or databases.\nIf the event schema of the data source is unknown, the system tries to infer the schema by extracting some sample data and analysing it."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/01_connect.png",alt:"Market Place"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/02_mqtt_adapter.png",alt:"MQTT adapter"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/03_configure_mqtt.png",alt:"Configure MQTT adpater"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/04_configure_format.png",alt:"Guess event schema"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/05_guess_schema.png",alt:"Guess event schema"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/06_edit_adapter.png",alt:"Edit adapter"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/07_start_adapter.png",alt:"Start adapter"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/new/08_data_stream_in_editor.png",alt:"New data stram in pipeline editor"})),(0,s.kt)("p",null,"Additionally to connecting new sources, data can be cleaned, transformed, and enriched with meta-information.\nTherefore, the event schema can be changed or enriched in step 3 (Define Event Schema)."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/connect/edit/01_edit_timestamp.png",alt:"Edit a property to timestamp"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/edit/02_change_unit.png",alt:"Change Unit of property"}),(0,s.kt)("img",{src:"/img/features_0_62_0/connect/edit/03_change_unit.png",alt:"Change Unit of property"})),(0,s.kt)("h2",{id:"manage-pipelines"},"Manage Pipelines"),(0,s.kt)("p",null,"The ",(0,s.kt)("em",{parentName:"p"},"Manage Pipelines")," view provides an overview of all existing pipelines.\nExisting pipelines can be managed using this view.\nFor instance, users can start and stop pipelines or delete them when they are not longer needed.\nPipeline actions can be performed by clicking one of the buttons next to each pipeline.\nFor each pipeline, the title and description is displayed in the table.\nBy clicking the edit symbol an overview of the created pipline is shown. In this window you are able to analyze statistics, identify errors or edit the pipeline."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/1_pipeline_overview.png",alt:"Pipeline Overview"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/2_pipeline_information.png",alt:"Pipeline infomation"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/3_delete_pipeline.png",alt:"Delete Pipelines"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/4_pipeline_deleted.png",alt:"Delete Pipelines"})),(0,s.kt)("p",null,'In a setting with many defined pipelines, it can get really hard to keep track of all pipelines.\nThis is why we introduce categories.\nA category is a set of pipelines that can be defined by users in order to better organize pipelines.\nBy clicking on the "Manage Categories" button on the top left, a new category can be added to StreamPipes.\nIn this example, we create a new category named "New Demo Category".\nAfter saving a category, pipelines can be added to the newly created category.\nThe new category is then presented as a tab in the ',(0,s.kt)("em",{parentName:"p"},"Pipeline Management")," view.\nThis tab contains all previously defined pipelines."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/5_pipeline_category.png",alt:"Pipeline Category"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/6_add_category.png",alt:"Add Pipeline Category"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/7_new_category.png",alt:"New Category"}),(0,s.kt)("img",{src:"/img/features_0_62_0/manage_pipelines/8_show_new_category.png",alt:"Show new Category"})),(0,s.kt)("h2",{id:"live-dashboard"},"Live Dashboard"),(0,s.kt)("p",null,'The live dashboard can be used for multiple use cases.\nIt is a good way to live monitor a running system in a dashboard, but it can also be used during the pipeline development to get a fast feedback from newly created pipelines.\nBelow is a screenshot of an example dashboard showing the current value of pressure, which further shows a line chart and a trafficlight for a water level pipeline.\nAll pipelines that contain the "Dashboard Sink" can be visualized in this view.\nTo add a new visualisation, click on the "Add visualisation" button on the top left corner.\nAfterwards, a three-step configuration menu is shown.\nThe first step is to select the pipeline that should be visualized.\nIn the second step, the type of visualization can be defined.\nCurrently 10 different types are available, including line charts, various map visualizations and data tables.\nAfter selecting the type (in our example "Gauge"), you can select the specific measurement values of the data stream that should be displayed.\nIn the example below, the water level value should be monitored and the gauge value should range from 0 to 100.\nOnce all steps are completed, the new visualization is placed on the dashboard and live data is presented as soon as it becomes available.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/dashboard/01_dashboard.png",alt:"Screenshot of live dashboard"}),(0,s.kt)("img",{src:"/img/features_0_62_0/dashboard/02_new_visualisation.png",alt:"Select Pipeline to visualize"}),(0,s.kt)("img",{src:"/img/features_0_62_0/dashboard/03_select_gauge.png",alt:"Select Visualization Type"}),(0,s.kt)("img",{src:"/img/features_0_62_0/dashboard/04_configure_gauge.png",alt:"Configure  Visualzation"}),(0,s.kt)("img",{src:"/img/features_0_62_0/dashboard/05_new_gauge_done.png",alt:"Show new Visualzation"})),(0,s.kt)("h2",{id:"file-download"},"File Download"),(0,s.kt)("p",null,"With the file download,  it is possible to download stored files directly from Elasticsearch.\nThis can be very useful for example when a data dumb is needed for a specific time range.\nAll data that is written into Elasticsearch using the ",(0,s.kt)("em",{parentName:"p"},"Elasticsearch Sink"),' can be accessed by the file downloader.\nA common use case is to download data for offline analysis and to train a machine learning algorithm.\nFirst, an index must be defined, afterwards, the time range must be set.\nA date picker helps users to enter the time range.\nWhen a user clicks the "Create File" button the file is created.\nAll files stored on the server can be downloaded via the download button.\nIf the files are not longer needed, they can be deleted by clicking the delete button.\nThis will remove the file from the server.\nSince data is stored in Elasticsearch anyways. it is recommended not to store the files for a longer period of time on the server.\nWhen a file is needed again at a later point in time it is easy to create it again.\nThis way a lot of disk space on the server can be saved, especially when the files are rather large.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/file_download/01_file_download.png",alt:"File Download"}),(0,s.kt)("img",{src:"/img/features_0_62_0/file_download/02_file_download.png",alt:"File Download with selected time range"}),(0,s.kt)("img",{src:"/img/features_0_62_0/file_download/03_file_download.png",alt:"File Download with new File"})),(0,s.kt)("h2",{id:"notifications"},"Notifications"),(0,s.kt)("p",null,"Notifications are a good solution to notify someone when a urgent situation occurs.\nA notification can be created by using the notification sink in the pipeline editor.\nWhen using such a sink a configuration dialogue is presented to the user.\nIn this dialogue the user must provide enough information to resolve the solution when it occurs.\nThe message can be nicely configured in the message editor.\nIt is also possible to embed values of the event that triggered the notification.\nThis can be done with the #property# notation.\nAll available properties are presented in the notification configurator.\nWhen the notification is triggered the #property# template is replaced with the actual value of the property."),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/notification/01_select_notification_sink.png",alt:"Select Notification"}),(0,s.kt)("img",{src:"/img/features_0_62_0/notification/02_configure_notification.png",alt:"Configure Notification"})),(0,s.kt)("p",null,'A pop up icon on the notification tab in the menu shows the user how many unread notifications currently are in the system.\nThis icon also alerts users when new notifications occur.\nIn the notification overview all notifications are listed.\nOn the top are the new notifications that are not read yet.\nA user can mark them as read by clicking on the little envelope icon.\nThose notifications are then no longer in the unread section, but they remain in the "All Messages" view.\nThis way it is possible to keep track of all notifications and have a look at them at a later point in time.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/notification/03_new_notification.png",alt:"New Notification"})),(0,s.kt)("h2",{id:"install-pipeline-elements"},"Install Pipeline Elements"),(0,s.kt)("p",null,'StreamPipes is highly configurable and extensible.\nPipeline elements can be added and removed during runtime.\nThis can be done in the "Install Pipeline Elements" view.\nAll available pipeline elements are shown here and can be selected to install or uninstall.\nIt is also possible to select multiple or all of them and then install them all together.\nWhen a new element is installed by the user it is automatically available in the "Pipeline Editor" and can be used for pipelines.\nElements that are uninstalled are removed from the system.\nThey can not longer be used within pipelines.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/install_elements/01_install_elements.png",alt:"Install Elements View"}),(0,s.kt)("img",{src:"/img/features_0_62_0/install_elements/02_install_countAggregation.png",alt:"Insall new Element"}),(0,s.kt)("img",{src:"/img/features_0_62_0/install_elements/03_installed_countAggregation.png",alt:"Installation Successful"}),(0,s.kt)("img",{src:"/img/features_0_62_0/install_elements/04_countAggregation_in_editor.png",alt:"Show new installed element"})),(0,s.kt)("h2",{id:"my-elements"},"My Elements"),(0,s.kt)("p",null,'The "My Elements" view gives a quick overview over all installed pipeline elements.\nHere they can be inspected and the description can be re-imported.\nIn this view it is also possible to have a look at the JSON-LD representation of each element.\nThis is not important for a user, but it is worth noting that the system uses this machine understandable format to support the user.\nFor example all the information of the sources, like data schema or unit information is in the JSON-LD meta data.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/my_elements/01_my_elements.png",alt:"My Elements Overview"}),(0,s.kt)("img",{src:"/img/features_0_62_0/my_elements/02_my_elements_jsonid.png",alt:"View JSON-LD"})),(0,s.kt)("h2",{id:"configuration"},"Configuration"),(0,s.kt)("p",null,"The last feature is the ",(0,s.kt)("em",{parentName:"p"},"configuration view"),'.\nHere, it is possible to change the configuration parameters of installed components.\nAll components containing processing elements automatically register in StreamPipes when they are started in the same network as the backend component.\nOnce a container is registered it is represented in the configuration view.\nThe green dot on the top left indicates that tha container is running properly.\nWhen there is a problem with a container the green dot changes to red and the user knows there is a problem.\nTo configure the parameters the top right arrow of a configuration box must be clicked.\nThen the configuration menu pops up.\nWithin there it is possible to change the parameters of a service.\nTo make the changes persistent the "Update" button must be clicked.\nA user should keep in mind that sometimes it is necessary to restart a container when the parameters are changed.\nSometimes it is also necessary to re-import the pipeline element description, either by uninstalling and re-installing them after the container restart or be reloading the description in the "My elements" view.'),(0,s.kt)("div",{class:"my-carousel"},(0,s.kt)("img",{src:"/img/features_0_62_0/configuration/01_configuration_overview.png",alt:"Configuration Overview"}),(0,s.kt)("img",{src:"/img/features_0_62_0/configuration/02_change_config.png",alt:"Change Configuration"})),(0,s.kt)("p",null,"Congratulations! You've just finished your first tour of StreamPipes.\nAlthough there's still more to learn, we introduced most of the currently available features.\nOn the next page, the different processing elements that come with the installation are explained."))}u.isMDXComponent=!0},17960:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/10_connection_error-93521f25a4c91c65e281ebe9ba404cbd.png"},47473:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/login-ba98b3939647cb6ed7b6edb5f6581ea2.png"}}]);