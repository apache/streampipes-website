"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[98479],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,h=p["".concat(c,".").concat(d)]||p[d]||f[d]||r;return t?i.createElement(h,o(o({ref:n},u),{},{components:t})):i.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},46247:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var i=t(87462),a=t(63366),r=(t(67294),t(3905)),o=["components"],s={id:"technicals-configuration",title:"Configuration",sidebar_label:"Configuration",original_id:"technicals-configuration"},c=void 0,l={unversionedId:"technicals-configuration",id:"version-0.90.0/technicals-configuration",title:"Configuration",description:"On this page we explain how the StreamPipes configuration works.",source:"@site/versioned_docs/version-0.90.0/07_technicals-configuration.md",sourceDirName:".",slug:"/technicals-configuration",permalink:"/docs/0.90.0/technicals-configuration",draft:!1,tags:[],version:"0.90.0",lastUpdatedBy:"Dominik Riemer",lastUpdatedAt:1688328858,formattedLastUpdatedAt:"Jul 2, 2023",sidebarPosition:7,frontMatter:{id:"technicals-configuration",title:"Configuration",sidebar_label:"Configuration",original_id:"technicals-configuration"},sidebar:"documentation",previous:{title:"Messaging",permalink:"/docs/0.90.0/technicals-messaging"},next:{title:"Get Help",permalink:"/docs/0.90.0/community-get-help"}},u={},p=[{value:"Edit Configurations",id:"edit-configurations",level:2},{value:"Configuration for Developers",id:"configuration-for-developers",level:2},{value:"Default Values",id:"default-values",level:2}],f={toc:p},d="wrapper";function h(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)(d,(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"On this page we explain how the StreamPipes configuration works.\nStreamPipes allows the individual services (pipeline element containers and third-party services) to store configuration parameters in a distributed key-value store.\nThis has the advantage that individual services do not need to store any configurations on the local file system, enabling us to run containers anywhere.\nAs a key-value store we use ",(0,r.kt)("a",{parentName:"p",href:"https://www.consul.io/"},"Consul"),", which is an essential service for all our services."),(0,r.kt)("img",{src:"/img/configuration/consul.png",width:"50%",alt:"Semantic description of data processor"}),(0,r.kt)("h2",{id:"edit-configurations"},"Edit Configurations"),(0,r.kt)("p",null,"All services in StreamPipes can have configuration parameters.\nYou can either change them in the consul user interface (which is by default running on port 8500) or directly in the StreamPipes Configurations Page.\nOnce a new  pipeline element container is started, it is registered in Consul and the parameters can be edited in the configuration page, as shown below.\nTo store changes in Consul, the update button must be clicked."),(0,r.kt)("div",{class:"my-carousel"},(0,r.kt)("img",{src:"/img/configuration/configuration_1.png",alt:"Configuration View"})),(0,r.kt)("h2",{id:"configuration-for-developers"},"Configuration for Developers"),(0,r.kt)("p",null,"We provide a Configurations API for the use of configuration parameters in your services.\nEach processing element project has a \u201cconfig\u201d package ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/apache/streampipes-extensions/tree/dev/streampipes-sinks-internal-jvm/src/main/java/org/streampipes/sinks/internal/jvm/config"},"[Example]"),".\nThis package usually contains two classes.\nOne containing unique keys for the configuration values and one containing the getter and setter methods to access these values.\nFor the naming of configuration keys, we recommend to use \u201cSP\u201d as a prefix.\nAs we explain later, it is possible to set default configurations as environment variables, this prefix makes them unique on your server.\nA configuration entry needs a unique config key. For this key, a value can be specified containing the configuration, like for example the port number of the service.\nFor each configuration, a description explaining the parameter can be provided, further the data type must be specified and whether it is a password or not.\nBelow, the schema of a configuration item is shown on the left and an example of a port configuration on the right."),(0,r.kt)("img",{src:"/img/configuration/config_key.png",width:"80%",alt:"Semantic description of data processor"}),(0,r.kt)("p",null,"As a developer, you can add as many new configurations to services as you wish, but there are some that are required for all processing element containers.\nThose are ",(0,r.kt)("strong",{parentName:"p"},"the host"),", ",(0,r.kt)("strong",{parentName:"p"},"the port"),", and ",(0,r.kt)("strong",{parentName:"p"},"the name")," of the service."),(0,r.kt)("h2",{id:"default-values"},"Default Values"),(0,r.kt)("p",null,"You can provide default values for the configurations, which are used when a configuration is read for the first time.\nThe first option is to register a configuration parameter in the Config class.\nThis is a fallback value, which is used if nothing else is defined.\nSince this value is static, we offer a second option.\nIt is possible to provide a default value by setting an environment variable.\nIn this case, the convention is that the key of a configuration parameter must be used as the environment variable.\nNow, this value is used instead of the value defined in the Config class.\nDuring development, the configuration values often need to be changed for debugging purposes, therefore we provide an .env file in all processing element projects and archetypes.\nThis file can be used by your IDE to set the environment variables. (e.g., ",(0,r.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/7861-envfile"},"Intellij Plugin"),")\nWhen you need to change the variable at runtime, you can do this in the StreamPipes configurations as explained before.\nThose changes take effect immediately without the need of a container restart."),(0,r.kt)("div",{class:"admonition warning"},(0,r.kt)("div",{class:"admonition-title"},"Installed pipeline elements"),(0,r.kt)("p",null,"Be cautious, when the configuration is used in the semantic description of a processing element which is already installed in StreamPipes, you have to reload this element in StreamPipes (my elements -> reload). In addition, changes might affect already running pipelines.")))}h.isMDXComponent=!0}}]);