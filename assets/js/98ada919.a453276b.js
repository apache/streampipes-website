"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[13446],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={id:"extend-tutorial-adapters",title:"Tutorial: Build Custom Adapters",sidebar_label:"Tutorial: Adapters"},p=void 0,l={unversionedId:"extend-tutorial-adapters",id:"version-0.93.0/extend-tutorial-adapters",title:"Tutorial: Build Custom Adapters",description:"In this tutorial, we will create a new data source consisting of a single data stream.",source:"@site/versioned_docs/version-0.93.0/06_extend-tutorial-adapters.md",sourceDirName:".",slug:"/extend-tutorial-adapters",permalink:"/docs/0.93.0/extend-tutorial-adapters",draft:!1,tags:[],version:"0.93.0",lastUpdatedBy:"Tim",lastUpdatedAt:1701097113,formattedLastUpdatedAt:"Nov 27, 2023",sidebarPosition:6,frontMatter:{id:"extend-tutorial-adapters",title:"Tutorial: Build Custom Adapters",sidebar_label:"Tutorial: Adapters"},sidebar:"documentation",previous:{title:"Your first data processor",permalink:"/docs/0.93.0/extend-first-processor"},next:{title:"Tutorial: Data Processors",permalink:"/docs/0.93.0/extend-tutorial-data-processors"}},d={},c=[{value:"Objective",id:"objective",level:2},{value:"Project Set Up",id:"project-set-up",level:2},{value:"Building a Basic Adapter",id:"building-a-basic-adapter",level:2},{value:"Describing the Adapter via the Configuration",id:"describing-the-adapter-via-the-configuration",level:3},{value:"Creating the Data Stream",id:"creating-the-data-stream",level:3},{value:"Defining the Event Schema",id:"defining-the-event-schema",level:3},{value:"Defining the Adapter Termination",id:"defining-the-adapter-termination",level:3},{value:"Register and Run the Adapter",id:"register-and-run-the-adapter",level:3},{value:"Building a more Advanced Adapter by Processing UI Input",id:"building-a-more-advanced-adapter-by-processing-ui-input",level:3},{value:"Read More",id:"read-more",level:3}],u={toc:c},m="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial, we will create a new data source consisting of a single data stream.\nBy the end of the tutorial, you will be able to implement custom adapters that allow you to connect to data sources\nother than those officially supported by StreamPipes.\nTo do this, we will split the tutorial into two parts.\nThe ",(0,i.kt)("a",{parentName:"p",href:"#building-a-basic-adapter"},"first part")," focuses on creating the adapter and defining the event stream.\nAt the end, we will have a working adapter that produces an event stream that can be used in StreamPipes.\nThis adapter does not provide any way to configure its behavior, so in\nthe ",(0,i.kt)("a",{parentName:"p",href:"#building-a-more-advanced-adapter-by-processing-ui-input"},"second part")," of the tutorial\nto show how we can extend our existing adapter to be configurable via the UI."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This tutorial shows how to build your own type of adapter.\nIt is intended for people who are interested in extending StreamPipes to meet their own needs.\nIf you are here to explore StreamPipes and are interested in using an adapter, you may want to\ncontinue ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.93.0/use-connect"},"here"),".")),(0,i.kt)("h2",{id:"objective"},"Objective"),(0,i.kt)("p",null,"We are going to create an adapter that will simulate a stream of data generated by a control station in a logistics\ncenter that is used to sort packages.\nThis station consists of two sensors: a light barrier that detects when a package passes through, and a weight sensor."),(0,i.kt)("p",null,"This sensor produces a continuous stream of events containing the current time stamp, an indicator of whether a package\nis present or the conveyor is empty, and the weight of the package in kilograms.\nThe events are published in JSON format as follows"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "timestamp": 1697720916959,\n  "parcelPresent": true,\n  "weight": 3.520\n}\n')),(0,i.kt)("p",null,"In the following section, we will show you how to develop an adapter that is capable of generating this stream so that\nit is available for further processing in StreamPipes."),(0,i.kt)("h2",{id:"project-set-up"},"Project Set Up"),(0,i.kt)("p",null,"Instead of creating a new project from scratch, we recommend to use our Maven archetype to create a new project\nskeleton (",(0,i.kt)("inlineCode",{parentName:"p"},"streampipes-archetype-extensions-jvm"),").\nEnter the following command in a command line of your choice (please ensure\nthat ",(0,i.kt)("a",{parentName:"p",href:"https://maven.apache.org/install.html"},"Apache Maven")," isinstalled):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mvn archetype:generate \\\n-DarchetypeGroupId=org.apache.streampipes -DarchetypeArtifactId=streampipes-archetype-extensions-jvm \\\n-DarchetypeVersion=0.93.0 -DgroupId=org.apache.streampipes \\\n-DartifactId=streampipes-archetype-extensions-jvm -DclassNamePrefix=ParcelControlStation -DpackageName=parcelcontrol\n")),(0,i.kt)("p",null,"This command will ask you for input twice, you can just skip both of them by hitting ",(0,i.kt)("em",{parentName:"p"},"enter"),".\nThe first dialog sets the version to use for our ",(0,i.kt)("inlineCode",{parentName:"p"},"streampipes-archetype-extensions-jvm")," module.\nFeel free to change this if you like."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Define value for property 'version' 1.0-SNAPSHOT: : \n\n Y: : \n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"mvn archetype:generate")," command generates some required files, the required file structure, and some boilerplate\ncode.\nThe generated file structure should look like the following:"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Note that you can customize the parameters of the mvn command to affect the file structure and file naming.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"\n|streampipes-archetype-extensions  # name is determined by '-DartifactId'\n|-- development\n|   |-- env \n|-- src\n|   |-- main\n|   |   |-- java.org.apache.streampipes  # name after .java. is determined by '-DgroupId'\n|   |   |   |-- pe.parcelcontrol  # name after .pe. is determined by '-DpackageName'\n|   |   |   |   |-- ParcelControlStationDataProcessor.java  # class name is determined by '-DclassNamePrefix'\n|   |   |   |   |-- ParcelControlStationDataSink.java\n|   |   |   |   |-- ParcelControlStationGenericAdapter.java\n|   |   |   |   |-- ParcelControlStationSpecificAdapter.java\n|   |   |   |-- Init.java\n|   |   |-- resources\n|   |   |   |-- org.apache.streampipes.pe.parcelcontrol.genericadapter\n|   |   |   |   |-- documentation.md\n|   |   |   |   |-- icon.png\n|   |   |   |   |-- strings.en\n|   |   |   |-- org.apache.streampipes.pe.parcelcontrol.processor\n|   |   |   |   |-- documentation.md\n|   |   |   |   |-- icon.png\n|   |   |   |   |-- strings.en\n|   |   |   |-- org.apache.streampipes.pe.parcelcontrol.sink\n|   |   |   |   |-- documentation.md\n|   |   |   |   |-- icon.png\n|   |   |   |   |-- strings.en\n|   |   |   |-- org.apache.streampipes.pe.parcelcontrol.specificadapter\n|   |   |   |   |-- documentation.md\n|   |   |   |   |-- icon.png\n|   |   |   |   |-- strings.en\n|   |-- test.java.org.apache.streampipes  # name after .java. is determined by '-DgroupId'\n|   |   |-- InitTest.java\n|-- Dockerfile\n|-- pom.xml\n\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"In addition to the basic project skeleton, the sample project also includes a sample ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," that you can use to\npackage your application into a Docker container.")),(0,i.kt)("h2",{id:"building-a-basic-adapter"},"Building a Basic Adapter"),(0,i.kt)("p",null,"In the following, we will demonstrate how to use the boilerplate code generated by the Maven plugin (\nsee ",(0,i.kt)("a",{parentName:"p",href:"#project-setup"},"Project setup"),").\nWithin this section, we will focus on creating an event stream that can be used within StreamPipes.\nThe following section shows how to configure the created adapter with UI input."),(0,i.kt)("p",null,"Attentive readers may have noticed that two adapter classes have been generated.\nWe will focus on the ",(0,i.kt)("inlineCode",{parentName:"p"},"ParcelControlStationSpecificAdapter")," first, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ParcelControlStationSimulatorGenericAdapter")," will\nbe used later for more advanced adapter features.\nFirst, let us take a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"ParcelControlStationSpecificAdapter.java")," file as generated by the Maven\narchetype."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx showLineNumbers",jsx:!0,showLineNumbers:!0},'package org.apache.streampipes.pe.parcelcontrol;\n\nimport org.apache.streampipes.commons.exceptions.connect.AdapterException;\nimport org.apache.streampipes.extensions.api.connect.IAdapterConfiguration;\nimport org.apache.streampipes.extensions.api.connect.IEventCollector;\nimport org.apache.streampipes.extensions.api.connect.StreamPipesAdapter;\nimport org.apache.streampipes.extensions.api.connect.context.IAdapterGuessSchemaContext;\nimport org.apache.streampipes.extensions.api.connect.context.IAdapterRuntimeContext;\nimport org.apache.streampipes.extensions.api.extractor.IAdapterParameterExtractor;\nimport org.apache.streampipes.model.AdapterType;\nimport org.apache.streampipes.model.connect.guess.GuessSchema;\nimport org.apache.streampipes.sdk.builder.adapter.AdapterConfigurationBuilder;\nimport org.apache.streampipes.sdk.builder.adapter.GuessSchemaBuilder;\nimport org.apache.streampipes.sdk.helpers.Labels;\nimport org.apache.streampipes.sdk.helpers.Locales;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ParcelControlStationSpecificAdapter implements StreamPipesAdapter {\n\n  private boolean running = false;\n\n  @Override\n  public IAdapterConfiguration declareConfig() {\n    return AdapterConfigurationBuilder.create(\n        "org.apache.streampipes.pe.parcelcontrol.specificadapter",\n        ParcelControlStationSpecificAdapter::new\n      )\n      .withAssets(Assets.DOCUMENTATION, Assets.ICON)\n      .withCategory(AdapterType.Manufacturing)\n      .withLocales(Locales.EN)\n      .buildConfiguration();\n  }\n\n  @Override\n  public void onAdapterStarted(IAdapterParameterExtractor extractor,\n                               IEventCollector collector,\n                               IAdapterRuntimeContext adapterRuntimeContext) throws AdapterException {\n\n    Runnable demo = () -> {\n      while (running) {\n        // make event\n        Map<String, Object> event = new HashMap<>();\n        // forward the event to the adapter pipeline\n        collector.collect(event);\n      }\n    };\n    running = true;\n    new Thread(demo).start();\n  }\n\n  @Override\n  public void onAdapterStopped(IAdapterParameterExtractor extractor,\n                               IAdapterRuntimeContext adapterRuntimeContext) throws AdapterException {\n\n    // do cleanup\n    running = false;\n  }\n\n  @Override\n  public GuessSchema onSchemaRequested(IAdapterParameterExtractor extractor,\n                                       IAdapterGuessSchemaContext adapterGuessSchemaContext) throws AdapterException {\n\n    // build the schema by adding properties to the schema builder and a preview if possible\n    return GuessSchemaBuilder\n      .create()\n      .build();\n    }\n  }\n\n')),(0,i.kt)("p",null,"The class extends ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamPipesAdapter"),", which is the interface that all adapters within StreamPipes must implement.\nThis interface requires us to implement four methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"declareConfig()"),": This method is expected to return the configuration of the adapter. The configuration includes\nmetadata about the adapter and its input parameters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onAdapterStarted()"),": This method is expected to contain the actual adapter logic. It is called when the adapter is\nstarted, and is responsible for sending incoming data to StreamPipes as an event."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onAdapterStopped()"),": This method is called when the adapter is stopped and is responsible for gracefully exiting the\nadapter.\ngracefully and usually performs some cleanup tasks."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onSchemaRequested()"),": This method is expected to return the schema of the event stream. This is ideally done\ndynamically based on some incoming data (",(0,i.kt)("em",{parentName:"li"},"guess"),") or provided statically if not otherwise possible.")),(0,i.kt)("h3",{id:"describing-the-adapter-via-the-configuration"},"Describing the Adapter via the Configuration"),(0,i.kt)("p",null,"The standard code generated here is already sufficient for us.\nSo let's have a quick look at the important aspects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 4"),": Here we define a unique identifier for our adapter. This allows us to identify all instances of the same\nadapter. Including your own namespace is always a good choice to avoid conflicts."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 7"),": Here we define what assets are available for this adapter. In this case, we provide a documentation file and\nan icon. Both assets are located in the `resource' directory (see file tree above)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 8"),": This defines a rough categorization along predefined adapter types."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 9"),": Here we define which locales are available for this adapter. Since we only provide one `strings.en' file so\nfar (see file tree above), the current selection is sufficient. Theoretically you can support multiple languages, but\nthis is not fully supported yet.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {4,7-9} showLineNumbers",jsx:!0,"{4,7-9}":!0,showLineNumbers:!0},'  @Override\n  public IAdapterConfiguration declareConfig() {\n    return AdapterConfigurationBuilder.create(\n        "org.apache.streampipes.pe.parcelcontrol.specificadapter",\n        ParcelControlStationSpecificAdapter::new\n      )\n      .withAssets(Assets.DOCUMENTATION, Assets.ICON)\n      .withCategory(AdapterType.Manufacturing)\n      .withLocales(Locales.EN)\n      .buildConfiguration();\n  }\n')),(0,i.kt)("p",null,"Before we continue, let's quickly have a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"strings.en")," file that defines our locales.\nHere we can define a meaningful and human-readable adapter tile in the first line and a short description:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"org.apache.streampipes.pe.parcelcontrol.specificadapter.title=Parcel Control Station (simple)\norg.apache.streampipes.pe.parcelcontrol.specificadapter.description=This adapter simulates data coming from a parcel control station in a logistics center.\n")),(0,i.kt)("p",null,"Now we have successfully configured our adapter and prepared all descriptive elements, we can focus on the actual logic."),(0,i.kt)("h3",{id:"creating-the-data-stream"},"Creating the Data Stream"),(0,i.kt)("p",null,"The logic that creates events that are then populated via StreamPipes is defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"onAdapterStarted()"),".\nWithin this method, connectors usually connect to the data source and extract data.\nIn our case, however, we simply want to create some sample data directly.\nThe two main parts that should always happen within this method are highlighted in the provided skeleton code:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 10"),": Creating an event is crucial for our adapters. This event is then filled with data by the adapter before it\nis distributed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 13"),": The event must finally be passed to the ",(0,i.kt)("inlineCode",{parentName:"li"},"collector"),", which then takes the data and distributes it within\nStreamPipes in the form of a ",(0,i.kt)("a",{parentName:"li",href:"/docs/0.93.0/concepts-overview#data-stream"},"data stream"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {10,13} showLineNumbers",jsx:!0,"{10,13}":!0,showLineNumbers:!0},"@Override\npublic void onAdapterStarted(IAdapterParameterExtractor extractor,\n                             IEventCollector collector,\n                             IAdapterRuntimeContext adapterRuntimeContext) throws AdapterException {\n\n  Runnable demo = () -> {\n    while (running) {\n    \n      // make event\n      Map<String, Object> event = new HashMap<>();\n      \n      // forward the event to the adapter pipeline\n      collector.collect(event);\n    }\n  };\n  running = true;\n  new Thread(demo).start();\n}\n")),(0,i.kt)("p",null,"So the only thing left to do is to create the actual events.\nIn our scenario, we want to create two types of events: one describing an empty conveyor and one describing a detected\nand weighed package.\nTo keep the implementation simple, we simply want to have a parcel event every five seconds. We can implement this as\nfollows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},' Runnable parcelControl = () -> {\n    while (running) {\n    \n      // get the current time in seconds\n      long timestamp = System.currentTimeMillis();\n      long timeInSeconds = (int) timestamp / 1000;\n    \n      // make event\n      Map<String, Object> event = new HashMap<>();\n      event.put("timestamp", timestamp);\n      \n      if (timeInSeconds % 5 == 0) {\n        event.put("parcelPresent", true);\n        event.put("weight", ThreadLocalRandom.current().nextDouble(0, 10));\n        \n      } else {\n        event.put("parcelPresent", false);\n        event.put("weight", 0);\n      }\n      \n      // forward the event to the adapter pipeline\n      collector.collect(event);\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  };\n  running = true;\n  new Thread(parcelControl).start();\n')),(0,i.kt)("p",null,"This is already enough to get a data stream into StreamPipes.\nAs the next step we need to describe to event schema."),(0,i.kt)("h3",{id:"defining-the-event-schema"},"Defining the Event Schema"),(0,i.kt)("p",null,"In StreamPipes, each data stream comes with an event schema that describes what information the event contains,\nin what data formats, and some semantic type information.\nThis allows StreamPipes to provide easy and convenient stream handling with a lot of automatic conversions and\nvalidations.\nFor example, whether a particular data processor is suitable for a given event stream.\nThis event schema is provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"onSchemaRequested()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic GuessSchema onSchemaRequested(IAdapterParameterExtractor extractor,\n                                     IAdapterGuessSchemaContext adapterGuessSchemaContext) throws AdapterException {\n\n  // build the schema by adding properties to the schema builder and a preview if possible\n  return GuessSchemaBuilder\n    .create()\n    .build();\n  }\n\n")),(0,i.kt)("p",null,"Normally, the event schema is determined automatically and dynamically, since an adapter is usually quite generic (read\nmore in the ",(0,i.kt)("a",{parentName:"p",href:"#advanced"},"Advanced section"),").\nBut in our case, we already know the event schema, and it never changes, so we can just define it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {3,13-20} showLineNumbers",jsx:!0,"{3,13-20}":!0,showLineNumbers:!0},'@Override\npublic GuessSchema onSchemaRequested(IAdapterParameterExtractor extractor,\n                                     IAdapterGuessSchemaContext adapterGuessSchemaContext) throws AdapterException {\n\n  // build the schema by adding properties to the schema builder and a preview if possible\n  return GuessSchemaBuilder.create()\n          .property(timestampProperty("timestamp"))\n          .sample("timestamp", System.currentTimeMillis())\n          .property(PrimitivePropertyBuilder\n                  .create(Datatypes.Boolean, "parcelPresent")\n                  .label("Parcel Present")\n                  .description("Indicates if a parcel is weighed.")\n                  .domainProperty(SO.BOOLEAN)\n                  .scope(PropertyScope.MEASUREMENT_PROPERTY)\n                  .build())\n          .sample("parcelPresent", true)\n          .property(PrimitivePropertyBuilder\n                  .create(Datatypes.Double, "weight")\n                  .label("Parcel Weight")\n                  .description("Parcel weight")\n                  .domainProperty(SO.WEIGHT)\n                  .scope(PropertyScope.MEASUREMENT_PROPERTY)\n                  .build())\n          .sample("weight", 3.520)\n          .build();\n')),(0,i.kt)("p",null,"An attribute of an Event is referred to as ",(0,i.kt)("inlineCode",{parentName:"p"},"property")," in StreamPipes.\nSo in our case we have three properties.\nSince StreamPipes creates a sample event in the UI when configuring the adapter (\nsee ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.93.0/use-connect#schema-editor"},"here"),"),\nproviding a meaningful sample value for every property allows StreamPipes to demonstrate its full potential."),(0,i.kt)("p",null,"Since every event schema is required to have a timestamp property, we provide a convenience definition (see ",(0,i.kt)("inlineCode",{parentName:"p"},"line 3"),").\nFor all other properties the recommend way of definition is using the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrimitivePropertyBuilder")," (see ",(0,i.kt)("inlineCode",{parentName:"p"},"line 13-20"),") and\nconsists of the following steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 14"),": every property must have a data type specified and a property name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 15"),": In addition to the property name we can define a label that is designed for the end user and shown in the\nUI."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 16"),": Assigns a human-readable description to the event property. The description is used in the StreamPipes UI\nfor better explaining users the meaning of the property."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 17"),": Specifies the semantics of the property (e.g., whether a double value stands for weight or temperature\nvalue)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Line 18"),": Assigns a property scope to the event property. This determines how the property is handled internally.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"StreamPipes does not require you to provide all of this information about a property.\nAnything beyond line ",(0,i.kt)("inlineCode",{parentName:"p"},"14")," (up to line ",(0,i.kt)("inlineCode",{parentName:"p"},"20"),") is optional, but the more you provide, the better StreamPipes can show it's\nfull potential and feature richness.")),(0,i.kt)("p",null,"This makes our adapter almost complete, there is only one little step left."),(0,i.kt)("h3",{id:"defining-the-adapter-termination"},"Defining the Adapter Termination"),(0,i.kt)("p",null,"As a final step, we need to define what should happen if the adapter is stopped.\nIn general, the adapter should not fire any events after that.\nNormally, this step includes things like closing connections and clearing resources.\nIn our case this is quite simple, we just need to stop our thread:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic void onAdapterStopped(IAdapterParameterExtractor extractor,\n                             IAdapterRuntimeContext adapterRuntimeContext) throws AdapterException {\n\n  // do cleanup\n  running = false;\n}\n")),(0,i.kt)("p",null,"Now it's time to start our adapter and observe it in action!"),(0,i.kt)("h3",{id:"register-and-run-the-adapter"},"Register and Run the Adapter"),(0,i.kt)("p",null,"Before we actually use our adapter, let's take a quick look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," class. This class is responsible for\nregistering our adapter service with the core to make the adapter available in StreamPipes.\nThis is done within ",(0,i.kt)("inlineCode",{parentName:"p"},"provideServiceDefinition()"),". Since we don't have the generic adapter ready yet,\nwe'll comment out its registration (",(0,i.kt)("inlineCode",{parentName:"p"},"line 7"),"). Now we can run the ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," class to register the adapter with your running\nStreamPipes instance. If you don't have a running instance at your hand,\nyou can take a look at our ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.93.0/try-installation"},"Installation Guide"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {7-8} showLineNumbers",jsx:!0,"{7-8}":!0,showLineNumbers:!0},'@Override\npublic SpServiceDefinition provideServiceDefinition() {\n  return SpServiceDefinitionBuilder.create("org.apache.streampipes",\n          "human-readable service name",\n          "human-readable service description", 8090)\n      .registerRuntimeProvider(new StandaloneStreamPipesRuntimeProvider())\n      //.registerAdapter(new ParcelControlStationGenericAdapter())\n      .registerAdapter(new ParcelControlStationSpecificAdapter())\n      .registerMessagingFormats(\n          new JsonDataFormatFactory(),\n          new CborDataFormatFactory(),\n          new SmileDataFormatFactory(),\n          new FstDataFormatFactory())\n      .registerMessagingProtocols(\n          new SpKafkaProtocolFactory(),\n          new SpJmsProtocolFactory(),\n          new SpMqttProtocolFactory(),\n          new SpNatsProtocolFactory(),\n          new SpPulsarProtocolFactory())\n      .build();\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"When executing the ",(0,i.kt)("inlineCode",{parentName:"p"},"main()")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," class, make sure that all environment variables are set from\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"development/env")," file are set.\nIf they are not set, the adapter may not be able to register with StreamPipes.")),(0,i.kt)("p",null,"Once you see the following log message in the console, the adapter is ready, and you can switch to the UI of your\nStreamPipes instance."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"s.s.e.c.ConnectWorkerRegistrationService : Successfully connected to master. Worker is now running.\n")),(0,i.kt)("p",null,"Please go to the connect module and click on ",(0,i.kt)("inlineCode",{parentName:"p"},"New Adapter"),",\nyou should now be able to see your adapter ",(0,i.kt)("inlineCode",{parentName:"p"},"Parcel Control Station (simple)"),":"),(0,i.kt)("img",{src:"/img/06_tutorial_adapter/adapter-demo.gif",alt:"Demo of parcel adapter"}),(0,i.kt)("p",null,"The adapter runs successfully in StreamPipes, you can now play around with the data stream that the\nadapter, or continue with the next section to learn how to make an adapter configurable through the UI."),(0,i.kt)("h3",{id:"building-a-more-advanced-adapter-by-processing-ui-input"},"Building a more Advanced Adapter by Processing UI Input"),(0,i.kt)("p",null,"In this section, we will extend our previous build apter by adding the ability to configure the minimum and maximum\npackage\nin the UI from which the weight value is retrieved.\nThe beauty of building adapters for StreamPipes is that you don't have to worry about the UI.\nStreamPipes provides a set of pre-built input elements for adapters that you can simply add to your adapter\nconfiguration.\nSo the first thing we need to customize is ",(0,i.kt)("inlineCode",{parentName:"p"},"declareConfig()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {10-11} showLineNumbers",jsx:!0,"{10-11}":!0,showLineNumbers:!0},'@Override\npublic IAdapterConfiguration declareConfig() {\n  return AdapterConfigurationBuilder.create(\n                  "org.apache.streampipes.pe.parcelcontrol.specificadapter",\n                  ParcelControlStationSpecificAdapter::new\n          )\n          .withAssets(Assets.DOCUMENTATION, Assets.ICON)\n          .withCategory(AdapterType.Manufacturing)\n          .withLocales(Locales.EN)\n          .requiredFloatParameter(Labels.withId("min-weight"), 0.0f)\n          .requiredFloatParameter(Labels.withId("max-weight"), 10.f)\n          .buildConfiguration();\n}\n\n')),(0,i.kt)("p",null,"In line ",(0,i.kt)("inlineCode",{parentName:"p"},"9-10")," we have introduced two input parameters that expect float values as input. They have a default value\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"10")," resp. The defined identifier (",(0,i.kt)("inlineCode",{parentName:"p"},"min-weight")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"max-weight"),") can be used two provide a caption and\na description via the ",(0,i.kt)("inlineCode",{parentName:"p"},"strings.en")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"min-weight.title=Minimum Parcel Weight\nmin-weight.description=The lower bound from which the weight values are sampled randomly.\n\nmax-weight.title=Maximum Parcel Weight\nmax-weight.description=The upper bound from which the weight values are sampled randomly.\n")),(0,i.kt)("p",null,"As a last step, we now need to modify the calculation of the parcel weight, so that the provided parameters are actually\napplied.\nThis is done in ",(0,i.kt)("inlineCode",{parentName:"p"},"onAdapterStarted()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"jsx {6-9,24} showLineNumbers",jsx:!0,"{6-9,24}":!0,showLineNumbers:!0},'@Override\npublic void onAdapterStarted(IAdapterParameterExtractor extractor,\n                             IEventCollector collector,\n                             IAdapterRuntimeContext adapterRuntimeContext) throws AdapterException {\n\n  var ex = extractor.getStaticPropertyExtractor();\n  \n  float minWeight = ex.singleValueParameter("min-weight", Float.class);\n  float maxWeight = ex.singleValueParameter("max-weight", Float.class);\n\n  Runnable parcelControl = () -> {\n    while (running) {\n\n      // get the current time in seconds\n      long timestamp = System.currentTimeMillis();\n      long timeInSeconds = (int) timestamp / 1000;\n\n      // make event\n      Map<String, Object> event = new HashMap<>();\n      event.put("timestamp", timestamp);\n\n      if (timeInSeconds % 5 == 0) {\n        event.put("parcelPresent", true);\n        event.put("weight", ThreadLocalRandom.current().nextDouble(minWeight, maxWeight));\n\n      } else {\n        event.put("parcelPresent", false);\n        event.put("weight", 0);\n      }\n\n      // forward the event to the adapter pipeline\n      collector.collect(event);\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  };\n  running = true;\n  new Thread(parcelControl).start();\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"line ",(0,i.kt)("inlineCode",{parentName:"li"},"6-9"),": We use an ",(0,i.kt)("inlineCode",{parentName:"li"},"StaticPropertyExtractor")," to retrieve both user inputs"),(0,i.kt)("li",{parentName:"ul"},"line ",(0,i.kt)("inlineCode",{parentName:"li"},"24"),": We calculate the parcel weight by passing the configured values vor the minimum and maximum value.")),(0,i.kt)("p",null,"You can now run the ",(0,i.kt)("inlineCode",{parentName:"p"},"main()")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," class to register the adapter at StreamPipes.\nThe UI dialog to create a new instance of our parcel control station adapter looks now the following:"),(0,i.kt)("img",{src:"/img/06_tutorial_adapter/adapter-with-ui-dialog.png",alt:"Adapter with UI dialog"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please make sure that you uninstall the parcel adapter in ",(0,i.kt)("inlineCode",{parentName:"p"},"Install Pipeline Elements")," before\nyou restart the execution of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," class, if you have already done so.\nOtherwise, the changes made in this section will have no effect.")),(0,i.kt)("h3",{id:"read-more"},"Read More"),(0,i.kt)("p",null,"Congratulations! You've just created your first StreamPipes adapter \ud83c\udf89 ",(0,i.kt)("br",null)),(0,i.kt)("p",null,"There are many more things to explore and data sources can be defined in much more detail.\nIf this is of interest to you, the ",(0,i.kt)("a",{parentName:"p",href:"#advanced"},"advanced section")," will satisfy your needs."),(0,i.kt)("p",null,"If anything within this tutorial did not work for you or you had problems following it,\nplease feel free to provide some feedback by opening an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apache/streampipes/issues/new?assignees=&labels=bug%2Cdocumentation%2Cwebsite&projects=&template=doc_website_issue_report.yml"},"issue on GitHub"),"."))}h.isMDXComponent=!0}}]);