"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[58209],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70910:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],s={id:"extend-client",title:"StreamPipes Client",sidebar_label:"StreamPipes Client"},l=void 0,p={unversionedId:"extend-client",id:"version-0.93.0/extend-client",title:"StreamPipes Client",description:"This section explains how to use the Apache StreamPipes Java Client. Please read the Python docs to find out how to use",source:"@site/versioned_docs/version-0.93.0/06_extend-client.md",sourceDirName:".",slug:"/extend-client",permalink:"/docs/0.93.0/extend-client",draft:!1,tags:[],version:"0.93.0",lastUpdatedBy:"Tim",lastUpdatedAt:1701097113,formattedLastUpdatedAt:"Nov 27, 2023",sidebarPosition:6,frontMatter:{id:"extend-client",title:"StreamPipes Client",sidebar_label:"StreamPipes Client"},sidebar:"documentation",previous:{title:"Tutorial: Data Sinks",permalink:"/docs/0.93.0/extend-tutorial-data-sinks"},next:{title:"SDK: Functions",permalink:"/docs/0.93.0/extend-sdk-functions"}},c={},d=[{value:"About the StreamPipes client",id:"about-the-streampipes-client",level:2},{value:"Using the StreamPipes client",id:"using-the-streampipes-client",level:2},{value:"Obtaining an API token",id:"obtaining-an-api-token",level:2},{value:"Connecting to StreamPipes",id:"connecting-to-streampipes",level:2},{value:"Working with the client",id:"working-with-the-client",level:2},{value:"Consuming live data",id:"consuming-live-data",level:2}],m={toc:d},u="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"Looking for Python support?",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This section explains how to use the Apache StreamPipes Java Client. Please read the Python docs to find out how to use\nthe client for Python.")),(0,r.kt)("h2",{id:"about-the-streampipes-client"},"About the StreamPipes client"),(0,r.kt)("p",null,"Sometimes you don't want to write your own extensions to StreamPipes, but want to interact with StreamPipes from\nexternal application.\nOne example is to influence the lifecycle of pipelines - think of a feature which automatically starts or stops specific\npipelines that monitor the production of a specific product."),(0,r.kt)("p",null,"Another example is to gather live data from Apache StreamPipes, e.g., to consume data that has been previously connected\nby an external, standalone application."),(0,r.kt)("p",null,"For such use cases, we provide the StreamPipes client, which is currently available in Python and Java. This section\ncovers the usage of the Java client."),(0,r.kt)("h2",{id:"using-the-streampipes-client"},"Using the StreamPipes client"),(0,r.kt)("admonition",{title:"Choosing the right version",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Your client library version should match the installed Apache StreamPipes version. Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"${streampipes.version}")," with\nthe version of your installation, e.g., ",(0,r.kt)("inlineCode",{parentName:"p"},"0.92.0"),".")),(0,r.kt)("p",null,"In your Java project, add the following dependency to your pom file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"\n<dependency>\n    <groupId>org.apache.streampipes</groupId>\n    <artifactId>streampipes-client</artifactId>\n    <version>${streampipes.version}</version>\n</dependency>\n\n")),(0,r.kt)("h2",{id:"obtaining-an-api-token"},"Obtaining an API token"),(0,r.kt)("img",{className:"docs-image",src:"/img/screenshots/streampipes-profile-token.png",alt:"Overview StreamPipes Architecture"}),(0,r.kt)("p",null,"To communicate with Apache StreamPipes, you need to provide proper credentials. There are two ways to obtain\ncredentials:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An API token, which is bound to a user. The API token can be generate from the UI clicking on the user icon and then\nnavigate to ",(0,r.kt)("inlineCode",{parentName:"li"},"Profile/API"),"."),(0,r.kt)("li",{parentName:"ul"},"A service user, which can be created by users with role ",(0,r.kt)("inlineCode",{parentName:"li"},"Admin"),".")),(0,r.kt)("p",null,"Service users can have their own permissions, while API tokens inherit all permissions from the corresponding user."),(0,r.kt)("h2",{id:"connecting-to-streampipes"},"Connecting to StreamPipes"),(0,r.kt)("p",null,"Once you have your API token and configured your dependencies, you can connect to an Apache StreamPipes instance as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\nCredentialsProvider credentials=StreamPipesCredentials\n    .withApiKey("admin@streampipes.apache.org","YOUR_API_KEY");\n\n// Create an instance of the StreamPipes client\n    StreamPipesClient client=StreamPipesClient\n    .create("localhost",8082,credentials,true);\n\n')),(0,r.kt)("p",null,"The following configurations are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"withApiKey")," method expects the username and the API key. Alternatively, use the ",(0,r.kt)("inlineCode",{parentName:"li"},"withServiceToken")," method to\nauthenticate as a service user."),(0,r.kt)("li",{parentName:"ul"},"The client instance requires the hostname or IP address of your running StreamPipes instance. In addition, you need to\nprovide the port, the credentials object and a flag which needs to be set in case the StreamPipes instance is not\nserved over HTTPS."),(0,r.kt)("li",{parentName:"ul"},"There are short-hand convenience options to create a client instance.")),(0,r.kt)("h2",{id:"working-with-the-client"},"Working with the client"),(0,r.kt)("p",null,"Here are some examples how you can work with the StreamPipes client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n// Get streams\nList<SpDataStream> streams=client.streams().all();\n\n// Get a specific stream\n    Optional<SpDataStream> stream=client.streams().get("STREAM_ID");\n\n// see the schema of a data stream\n    EventSchema schema=stream.get().getEventSchema();\n\n// print the list of fields of this stream\n    List<EventProperty> fields=schema.getEventProperties();\n\n// Get all pipelines\n    List<Pipeline> pipelines=client.pipelines().all();\n\n// Start a pipeline\n    PipelineOperationStatus status=client.pipelines().start(pipelines.get(0));\n\n// Stop a pipeline with providing a pipeline Id\n    PipelineOperationStatus status=client.pipelines().stop("PIPELINE_ID");\n\n// Get all pipeline element templates\n    List<PipelineElementTemplate> templates=client.pipelineElementTemplates().all();\n\n// Get all data sinks\n    List<DataSinkInvocation> dataSinks=client.sinks().all();\n\n\n')),(0,r.kt)("h2",{id:"consuming-live-data"},"Consuming live data"),(0,r.kt)("p",null,"StreamPipes supports a variety of messaging protocols to internally handle data streams. If you plan to gather live data\nfrom the client library, you also need to add one or more of the supported messaging\nprotocols to the pom file. The default protocol depends on the StreamPipes configuration and is set in the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file\nin your installation folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"\n\x3c!-- For Kafka support --\x3e\n<dependency>\n    <groupId>org.apache.streampipes</groupId>\n    <artifactId>streampipes-messaging-kafka</artifactId>\n    <version>${streampipes.version}</version>\n</dependency>\n\n        \x3c!-- For Nats support --\x3e\n<dependency>\n<groupId>org.apache.streampipes</groupId>\n<artifactId>streampipes-messaging-nats</artifactId>\n<version>${streampipes.version}</version>\n</dependency>\n\n\n        \x3c!-- For MQTT support --\x3e\n<dependency>\n<groupId>org.apache.streampipes</groupId>\n<artifactId>streampipes-messaging-mqtt</artifactId>\n<version>${streampipes.version}</version>\n</dependency>\n\n")),(0,r.kt)("p",null,"In addition, add the message format that is used internally by StreamPipes. The default message format used by\nStreamPipes is JSON, so let's include the dependency as well:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"\n\x3c!-- For JSON support --\x3e\n<dependency>\n    <groupId>org.apache.streampipes</groupId>\n    <artifactId>streampipes-dataformat-json</artifactId>\n    <version>${streampipes.version}</version>\n</dependency>\n\n")),(0,r.kt)("p",null,"Once you've imported the dependencies, it is easy to consume live data. First, register the protocols and formats in\nyour client instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"\nclient.registerProtocol(new SpKafkaProtocolFactory());\n\n// or Nats:\n    client.registerProtocol(new SpNatsProtocolFactory());\n\n// data format:\n    client.registerDataFormat(new JsonDataFormatFactory());\n\n")),(0,r.kt)("p",null,"Then, you are ready to consume data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\nclient.streams().subscribe(dataStreams.get(0),new EventProcessor() {\n@Override\npublic void onEvent(Event event) {\n    // example\n    MapUtils.debugPrint(System.out,"event",event.getRaw());\n    }\n    });\n\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"There are many more options to work with the StreamPipes Client - e.g., you can trigger emails directly from the API.\nJust explore the various classes and interfaces provided by the client!")))}h.isMDXComponent=!0}}]);