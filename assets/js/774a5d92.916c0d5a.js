"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61498],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(r),d=i,f=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(f,a(a({ref:t},m),{},{components:r})):n.createElement(f,a({ref:t},m))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},38183:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],s={id:"org.apache.streampipes.processors.filters.jvm.sdt",title:"Swinging Door Trending (SDT) Filter Processor",sidebar_label:"Swinging Door Trending (SDT) Filter Processor"},p=void 0,l={unversionedId:"pe/org.apache.streampipes.processors.filters.jvm.sdt",id:"version-0.95.0/pe/org.apache.streampipes.processors.filters.jvm.sdt",title:"Swinging Door Trending (SDT) Filter Processor",description:"\x3c!--",source:"@site/versioned_docs/version-0.95.0/pe/org.apache.streampipes.processors.filters.jvm.sdt.md",sourceDirName:"pe",slug:"/pe/org.apache.streampipes.processors.filters.jvm.sdt",permalink:"/docs/0.95.0/pe/org.apache.streampipes.processors.filters.jvm.sdt",draft:!1,tags:[],version:"0.95.0",lastUpdatedBy:"Dominik Riemer",lastUpdatedAt:1718285506,formattedLastUpdatedAt:"Jun 13, 2024",frontMatter:{id:"org.apache.streampipes.processors.filters.jvm.sdt",title:"Swinging Door Trending (SDT) Filter Processor",sidebar_label:"Swinging Door Trending (SDT) Filter Processor"},sidebar:"documentation",previous:{title:"String To State",permalink:"/docs/0.95.0/pe/org.apache.streampipes.processors.transformation.jvm.processor.stringoperator.state"},next:{title:"Synchronize Two Streams",permalink:"/docs/0.95.0/pe/org.apache.streampipes.processors.filters.jvm.merge"}},m={},c=[{value:"Description",id:"description",level:2},{value:"Required Inputs",id:"required-inputs",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Timestamp Field",id:"timestamp-field",level:3},{value:"Value Field",id:"value-field",level:3},{value:"Compression Deviation",id:"compression-deviation",level:3},{value:"Compression Minimum Time Interval",id:"compression-minimum-time-interval",level:3},{value:"Compression Maximum Time Interval",id:"compression-maximum-time-interval",level:3},{value:"Output",id:"output",level:2}],u={toc:c},d="wrapper";function f(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"/img/pipeline-elements/org.apache.streampipes.processors.filters.jvm.sdt/icon.png",width:"150px;",class:"pe-image-documentation"})),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"Swinging Door Trending (SDT)")," algorithm is a linear trend compression algorithm.\nIn essence, it replaces a series of continuous ",(0,o.kt)("inlineCode",{parentName:"p"},"(timestamp, value)")," points with a straight line determined by the start and end points."),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"Swinging Door Trending (SDT) Filter Processor")," can extract and forward the characteristic events of the original stream.\nIn general, this filter can also be used to reduce the frequency of original data in a lossy way."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"required-inputs"},"Required Inputs"),(0,o.kt)("p",null,"The processor works with any input event that has ",(0,o.kt)("strong",{parentName:"p"},"one field containing a timestamp")," and\n",(0,o.kt)("strong",{parentName:"p"},"one field containing a numerical value"),"."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"timestamp-field"},"Timestamp Field"),(0,o.kt)("p",null,"Specifies the timestamp field name where the SDT algorithm should be applied on."),(0,o.kt)("h3",{id:"value-field"},"Value Field"),(0,o.kt)("p",null,"Specifies the value field name where the SDT algorithm should be applied on."),(0,o.kt)("h3",{id:"compression-deviation"},"Compression Deviation"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Compression Deviation")," is the most important parameter in SDT that represents the maximum difference\nbetween the current sample and the current linear trend. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Compression Deviation")," needs to be greater than 0 to perform compression."),(0,o.kt)("h3",{id:"compression-minimum-time-interval"},"Compression Minimum Time Interval"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Compression Minimum Time Interval")," is a parameter measures the time distance between two stored data points,\nwhich is used for noisy reduction. "),(0,o.kt)("p",null,"If the time interval between the current point and the last stored point is less than or equal to its value,\ncurrent point will NOT be stored regardless of compression deviation. "),(0,o.kt)("p",null,"The default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," with time unit ms."),(0,o.kt)("h3",{id:"compression-maximum-time-interval"},"Compression Maximum Time Interval"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Compression Maximum Time Interval")," is a parameter measure the time distance between two stored data points. "),(0,o.kt)("p",null,"If the time interval between the current point and the last stored point is greater than or equal to its value,\ncurrent point will be stored regardless of compression deviation. "),(0,o.kt)("p",null,"The default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"9,223,372,036,854,775,807"),"(",(0,o.kt)("inlineCode",{parentName:"p"},"Long.MAX_VALUE"),") with time unit ms."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"output"},"Output"),(0,o.kt)("p",null,"The characteristic event stream forwarded by the SDT filter."))}f.isMDXComponent=!0}}]);