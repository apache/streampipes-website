"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],s={title:"Secure OPC-UA Integration with Apache StreamPipes: A Comprehensive Guide",author:"Dominik Riemer",authorURL:"https://github.com/dominikriemer",authorImageURL:"/img/about/riemer.png"},c=void 0,l={permalink:"/blog/2025/05/20/opc-ua-certificates",source:"@site/blog/2025-05-20-opc-ua-certificates.md",title:"Secure OPC-UA Integration with Apache StreamPipes: A Comprehensive Guide",description:"With the release of Apache StreamPipes 0.97.0, the OPC UA adapter now supports encrypted communication using",date:"2025-05-20T00:00:00.000Z",formattedDate:"May 20, 2025",tags:[],readingTime:5.195,hasTruncateMarker:!0,authors:[{name:"Dominik Riemer",url:"https://github.com/dominikriemer",imageURL:"/img/about/riemer.png"}],frontMatter:{title:"Secure OPC-UA Integration with Apache StreamPipes: A Comprehensive Guide",author:"Dominik Riemer",authorURL:"https://github.com/dominikriemer",authorImageURL:"/img/about/riemer.png"},prevItem:{title:"From Sensor to Insight - Rapid IIoT Integration for IO-Link Devices with Apache StreamPipes",permalink:"/blog/2025/06/11/oi4-adapter"},nextItem:{title:"Usage-Based Maintenance with Apache StreamPipes",permalink:"/blog/2025/04/30/usage-based-maintanence"}},p={authorsImageUrls:[void 0]},u=[],h={toc:u},d="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(d,(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"With the release of Apache StreamPipes 0.97.0, the OPC UA adapter now supports encrypted communication using\ncertificates, enhancing security for Industrial IoT applications. This guide walks you through generating certificates,\nconfiguring them in StreamPipes, and setting up your OPC UA server for secure communication."),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"While an unencrypted security policy is the way most users try when they start testing StreamPipes for their first time,\nproduction-grade scenarios typically require encrypted communication."),(0,i.kt)("p",null,"In case you are already using Apache StreamPipes, you might have noticed that the OPC UA adapter now supports encrypted\nsecurity policies:"),(0,i.kt)("img",{src:"/img/blog/2025-05-20/opc-ua-configuration.png",alt:"OPC-UA adapter configuration"}),(0,i.kt)("p",null,"In this guide, I'll show how to set up a secure connection between your OPC UA server and Apache StreamPipes. This guide\nis intended to be a step-by-step-guide starting from certificate generation to the configuration of the OPC UA adapter\nin StreamPipes."),(0,i.kt)("p",null,"I'll show a working example on a local installation using Eclipse Milo as the OPC UA server. The same steps can be\napplied to production systems by integrating certificates into the volume of the extension service. There are other\nways to configure OPC-UA secure connections, but this guide will focus on a complete approach using self-signed\ncertificates for beginners."),(0,i.kt)("h1",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Apache StreamPipes 0.97.0 or newer"),(0,i.kt)("li",{parentName:"ul"},"An OPC-UA server supporting security policies ",(0,i.kt)("inlineCode",{parentName:"li"},"Sign")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Sign & Encrypt")),(0,i.kt)("li",{parentName:"ul"},"OpenSSL installed on your system")),(0,i.kt)("h1",{id:"generate-client-certificates"},"Generate client certificates"),(0,i.kt)("p",null,"When creating a new OPC-UA adapter in Apache StreamPipes, the extension service where the adapter is running in serves\nas the client.\nFirst, we need to create a client certificate for the client. In this example, we'll create a self-signed certificate."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"[req]\ndefault_bits       = 2048\nprompt             = no\ndefault_md         = sha256\nreq_extensions     = req_ext\nx509_extensions    = v3_ca\ndistinguished_name = dn\n\n[dn]\nCN = stream-pipes-client\n\n[req_ext]\nsubjectAltName = @alt_names\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyCertSign\nextendedKeyUsage = serverAuth, clientAuth\n\n[v3_ca]\nsubjectKeyIdentifier = hash\nbasicConstraints = CA:false\nsubjectAltName = @alt_names\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyCertSign\nextendedKeyUsage = serverAuth, clientAuth\n\n[alt_names]\nURI.1 = urn:org:apache:streampipes:opcua:client\n")),(0,i.kt)("p",null,"When using a self-signed certificate, it is requried to to provide the CA:false flag under basicConstraints.\nIn addition, note the subject alternative name that later needs to be matched by the application URI of the OPC-UA\nclient."),(0,i.kt)("p",null,"The next step is to generate the certificate and import it into a PKCS12 keystore. The keystore is used to store the key\npair we are generating in the first step."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -x509 -nodes -days 365 \\\n  -newkey rsa:2048 \\\n  -keyout client.key \\\n  -out client.crt \\\n  -config cert.conf \\\n  && openssl pkcs12 -export \\\n  -in client.crt \\\n  -inkey client.key \\\n  -out client.p12 \\\n  -name streampipes-client\n")),(0,i.kt)("p",null,"When I was asked for a password, I chose ",(0,i.kt)("inlineCode",{parentName:"p"},"streampipes"),". You can choose any password you like, but make sure to remember\nit, as\nwe will need it in the next step."),(0,i.kt)("p",null,"Check that the keystore lists the correct key by executing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"keytool -list -v -storetype PKCS12 -keystore client.p12\n")),(0,i.kt)("p",null,"You'll see the key you've just generated."),(0,i.kt)("h1",{id:"configure-streampipes-to-support-encrypted-connections"},"Configure StreamPipes to support encrypted connections"),(0,i.kt)("p",null,"To enable the OPC UA adapter to use the generated client certificate, we need to provide a few environment variables to\nStreamPipes."),(0,i.kt)("p",null,"Here is a list of all environment variables that are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_SECURITY_DIR (default: /streampipes-security/opcua): This is the directory where the keystore and\ntrusted/rejected server certificates are stored."),(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_KEYSTORE_FILE (default: keystore.pfx): This is the keystore file that contains the client certificate."),(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_KEYSTORE_PASSWORD (default: password): The password for the keystore file."),(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_KEYSTORE_TYPE (default: PKCS12): The type of the keystore file."),(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_KEYSTORE_ALIAS (default: apache-streampipes): The alias of the client certificate in the keystore."),(0,i.kt)("li",{parentName:"ul"},"SP_OPCUA_APPLICATION_URI (default: urn:org:apache:streampipes:opcua:client): The application URI of the client\ncertificate.")),(0,i.kt)("p",null,"We could have made the previous configuration easier by reusing some of the defaults. For learning purposes, we used\nsome other names for the alias and keystore filename."),(0,i.kt)("p",null,"In my setup, I've started a local StreamPipes instance. When using Docker, you can add the environment variables to the\nextensions service (e.g., extensions-all-iiot). In my local instance, I just add the emnvironment variables to my IDE\nsettings."),(0,i.kt)("p",null,"I add the following variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"SP_OPCUA_SECURITY_DIR=/home/user/streampipes-security/opcua\nSP_OPCUA_KEYSTORE_FILE=client.p12\nSP_OPCUA_KEYSTORE_PASSWORD=streampipes\nSP_OPCUA_KEYSTORE_ALIAS=streampipes-client\n")),(0,i.kt)("h1",{id:"connecting-to-an-opc-ua-server"},"Connecting to an OPC-UA server"),(0,i.kt)("p",null,"For this demo, I'm using the Eclipse Milo OPC UA server. You can download it from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/digitalpetri/opc-ua-demo-server"},"here"),".\nOnce the server is running, you can connect to it using the following URL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"opc.tcp://localhost:62541/milo\n")),(0,i.kt)("p",null,"Now it's time to switch to StreamPipes!"),(0,i.kt)("p",null,"Go to ",(0,i.kt)("strong",{parentName:"p"},"Connect")," -> ",(0,i.kt)("strong",{parentName:"p"},"New adapter")," -> ",(0,i.kt)("strong",{parentName:"p"},"OPC UA")," and enter the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Pull interval 1000\nIncomplete Events Ignore\nSecurity Mode Sign & Encrypt\nSecurity Policy Basic256Sha256\nURL opc.tcp://localhost:62541/milo\n")),(0,i.kt)("p",null,"Defocus the URL input field and wait for the OPC-UA server to connect. After a few seconds, you should see an error message appearing:"),(0,i.kt)("img",{src:"/img/blog/2025-05-20/opcua-connection-error.png",alt:"OPC-UA adapter connection error"}),(0,i.kt)("p",null,"This is expected, as we haven't added the client certificate to the trusted certificates of the OPC-UA server yet.\nSo we have to let Milo know that the client certificate can be trusted. In my local setup, I need to move the client certificate from the ",(0,i.kt)("inlineCode",{parentName:"p"},"rejected")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"trusted/certs")," folder as seen below:"),(0,i.kt)("img",{src:"/img/blog/2025-05-20/opcua-server-rejected.png",alt:"OPC-UA adapter rejected client certificate"}),(0,i.kt)("p",null,"So let's try again by clicking ",(0,i.kt)("inlineCode",{parentName:"p"},"Reload")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Available Nodes")," section of the adapter configuration page.\nWe'll get another error saying that the server certificate is not trusted.\nThis is again expected, as we haven't added the server certificate to the trusted certificates of the OPC-UA client yet.   "),(0,i.kt)("p",null,"To do that, we can have a look at the folder structure under ",(0,i.kt)("inlineCode",{parentName:"p"},"SP_OPC_UA_SECURITY_DIR"),":"),(0,i.kt)("img",{src:"/img/blog/2025-05-20/opcua-security-dir.png",alt:"OPC-UA security directory"}),(0,i.kt)("p",null,"Several new folders have been created by the Apache StreamPipes OPC-UA client.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"trusted")," folder contains the trusted server certificates, while the ",(0,i.kt)("inlineCode",{parentName:"p"},"rejected")," folder contains the rejected server certificates.\nWe'll move the server certificate from the ",(0,i.kt)("inlineCode",{parentName:"p"},"rejected")," folder to the ",(0,i.kt)("inlineCode",{parentName:"p"},"trusted/certs")," folder."),(0,i.kt)("p",null,"No we'll try again - and this time, we should see the available nodes in the adapter configuration page:"),(0,i.kt)("img",{src:"/img/blog/2025-05-20/opcua-available-nodes.png",alt:"OPC-UA adapter available nodes"}),(0,i.kt)("p",null,"You'll see the beautiful tree view where you can navigate through all OPC-UA nodes."),(0,i.kt)("p",null,"Now you can select the nodes you want to use in your adapter."),(0,i.kt)("p",null,"That's it! You've successfully configured the OPC-UA adapter to use encrypted communication with self-signed certificates."))}m.isMDXComponent=!0}}]);