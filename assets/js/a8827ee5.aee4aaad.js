"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[68903],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),c=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=c(a),u=n,f=l["".concat(p,".").concat(u)]||l[u]||m[u]||s;return a?r.createElement(f,o(o({ref:t},d),{},{components:a})):r.createElement(f,o({ref:t},d))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[l]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78193:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=a(87462),n=a(63366),s=(a(67294),a(3905)),o=["components"],i={id:"concepts-overview",title:"StreamPipes Concepts",sidebar_label:"Overview"},p=void 0,c={unversionedId:"concepts-overview",id:"concepts-overview",title:"StreamPipes Concepts",description:"To understand how StreamPipes works, it is helpful to understand a few core concepts, which are illustrated below.",source:"@site/../docs/02_concepts-overview.md",sourceDirName:".",slug:"/concepts-overview",permalink:"/docs/next/concepts-overview",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tim",lastUpdatedAt:1698088011,formattedLastUpdatedAt:"Oct 23, 2023",sidebarPosition:2,frontMatter:{id:"concepts-overview",title:"StreamPipes Concepts",sidebar_label:"Overview"},sidebar:"documentation",previous:{title:"Introduction",permalink:"/docs/next/introduction"},next:{title:"StreamPipes Connect",permalink:"/docs/next/use-connect"}},d={},l=[{value:"Adapter",id:"adapter",level:2},{value:"Data Stream",id:"data-stream",level:2},{value:"Data Processor",id:"data-processor",level:2},{value:"Data Sink",id:"data-sink",level:2},{value:"Pipeline",id:"pipeline",level:2}],m={toc:l},u="wrapper";function f(e){var t=e.components,a=(0,n.Z)(e,o);return(0,s.kt)(u,(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"To understand how StreamPipes works, it is helpful to understand a few core concepts, which are illustrated below.\nThese encompass the entire data journey within StreamPipes: Starting with data collection (",(0,s.kt)("a",{parentName:"p",href:"#adapter"},"adapters"),"),\nthrough data exchange (",(0,s.kt)("a",{parentName:"p",href:"#data-stream"},"data streams"),") and data processing (",(0,s.kt)("a",{parentName:"p",href:"#data-processor"},"data processors")," and ",(0,s.kt)("a",{parentName:"p",href:"#pipeline"},"pipelines"),"),\nto data persistence and distribution (",(0,s.kt)("a",{parentName:"p",href:"#data-sink"},"data sinks"),")."),(0,s.kt)("img",{src:"/img/02_concepts-overview/components-overview.png",alt:"Overview of concepts"}),(0,s.kt)("h2",{id:"adapter"},"Adapter"),(0,s.kt)("p",null,"An adapter connects to any external data source (e.g., OPC-UA, MQTT, S7 PLC, Modbus) and forwards the events it receives to the internal StreamPipes system.\nAdapters can either be created by using a predefined adapter for a data source available in our marketplace ",(0,s.kt)("a",{parentName:"p",href:"/docs/next/use-connect"},"StreamPipes Connect"),".\nAn overview of all available adapters can be found under the menu bar ",(0,s.kt)("strong",{parentName:"p"},"\ud83d\udcda Pipeline Elements"),".\nWhen you select one of these adapters, you can easily connect to the data source using an intuitive and convenient UI dialog (see the Connect section for more details).\nAlternatively, you can define your own adapter by ",(0,s.kt)("a",{parentName:"p",href:"/docs/next/extend-tutorial-adapters"},"using the provided Software Development Kit (SDK)"),".\nCreating an adapter is always the first step when you want to get data into StreamPipes and process it further."),(0,s.kt)("h2",{id:"data-stream"},"Data Stream"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data streams")," are the primary source for working with events in StreamPipes.\nA stream is an ordered sequence of events, where an event typically consists of one or more observation values and additional metadata.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"structure")," (or ",(0,s.kt)("inlineCode",{parentName:"p"},"schema")," as we call it) of an event provided by a data stream is stored in StreamPipes' internal semantic schema registry.\nData streams are primarily created by adapters, but can also be created by a ",(0,s.kt)("a",{parentName:"p",href:"/docs/next/extend-sdk-functions"},"StreamPipes Function"),"."),(0,s.kt)("h2",{id:"data-processor"},"Data Processor"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data processors")," in StreamPipes transform one or more input streams into an output stream.\nSuch transformations can be simple, such as filtering based on a predefined rule, or more complex, such as applying rule-based or learning-based algorithms to the data.",(0,s.kt)("br",{parentName:"p"}),"\n","Data processors can be applied to any data stream that meets the input requirements of a processor.\nIn addition, most processors can be configured by providing custom parameters directly in the user interface.\nProcessing elements define stream requirements, which are a set of minimum characteristics that an incoming event stream must provide.\nData processors can maintain state or perform stateless operations."),(0,s.kt)("h2",{id:"data-sink"},"Data Sink"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Data sinks")," consume event streams similar to data processors, but do not provide an output data stream.\nAs such, data sinks typically perform some action or trigger a visualization as a result of a stream transformation.\nSimilar to data processors, sinks also require the presence of specific input requirements from each bound data stream and can be customized.\nStreamPipes provides several internal data sinks, for example, to generate notifications, visualize live data, or persist historical data from incoming streams.\nIn addition, StreamPipes provides several data sinks to forward data streams to external systems such as databases."),(0,s.kt)("h2",{id:"pipeline"},"Pipeline"),(0,s.kt)("p",null,"A pipeline in Apache StreamPipes describes the transformation process from a data stream to a data sink.\nTypically, a pipeline consists of at least one data stream, zero or more data processors, and at least one data sink.\nPipelines are created graphically by users using the ",(0,s.kt)("a",{parentName:"p",href:"/docs/next/use-pipeline-editor"},"Pipeline Editor")," and can be started and stopped at any time."))}f.isMDXComponent=!0}}]);