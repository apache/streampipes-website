"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},83888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],s={id:"org.apache.streampipes.sinks.databases.jvm.iotdb",title:"Apache IoTDB",sidebar_label:"Apache IoTDB"},l=void 0,p={unversionedId:"pe/org.apache.streampipes.sinks.databases.jvm.iotdb",id:"version-0.97.0/pe/org.apache.streampipes.sinks.databases.jvm.iotdb",title:"Apache IoTDB",description:"\x3c!--",source:"@site/versioned_docs/version-0.97.0/pe/org.apache.streampipes.sinks.databases.jvm.iotdb.md",sourceDirName:"pe",slug:"/pe/org.apache.streampipes.sinks.databases.jvm.iotdb",permalink:"/docs/pe/org.apache.streampipes.sinks.databases.jvm.iotdb",draft:!1,tags:[],version:"0.97.0",lastUpdatedBy:"Philipp Zehnder",lastUpdatedAt:1739799205,formattedLastUpdatedAt:"Feb 17, 2025",frontMatter:{id:"org.apache.streampipes.sinks.databases.jvm.iotdb",title:"Apache IoTDB",sidebar_label:"Apache IoTDB"},sidebar:"documentation",previous:{title:"Welford Change Detection",permalink:"/docs/pe/org.apache.streampipes.processors.changedetection.jvm.welford"},next:{title:"Buffered REST Publisher",permalink:"/docs/pe/org.apache.streampipes.sinks.brokers.jvm.bufferrest"}},d={},c=[{value:"Description",id:"description",level:2},{value:"Required input",id:"required-input",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Hostname",id:"hostname",level:3},{value:"Port",id:"port",level:3},{value:"Username",id:"username",level:3},{value:"Password",id:"password",level:3},{value:"<strong>Database Name</strong>",id:"database-name",level:3},{value:"<strong>Device (Entity) Name</strong>",id:"device-entity-name",level:3},{value:"<strong>Measurements</strong>",id:"measurements",level:3},{value:"Output",id:"output",level:2}],u={toc:c},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{src:"/img/pipeline-elements/org.apache.streampipes.sinks.databases.jvm.iotdb/icon.png",width:"150px;",class:"pe-image-documentation"})),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Stores events in a IoTDB database."),(0,i.kt)("p",null,"Events will be stored in timeseries ",(0,i.kt)("inlineCode",{parentName:"p"},"root.${Database Name}.${Device (Entity) Name}.${Event Key}"),"."),(0,i.kt)("p",null,"Please reference to ",(0,i.kt)("a",{parentName:"p",href:"https://iotdb.apache.org/"},"https://iotdb.apache.org/")," for more information."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"required-input"},"Required input"),(0,i.kt)("p",null,"This sink does not have any requirements and works with any incoming event type."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("h3",{id:"hostname"},"Hostname"),(0,i.kt)("p",null,"The hostname of the IoTDB instance."),(0,i.kt)("h3",{id:"port"},"Port"),(0,i.kt)("p",null,"The port of the IoTDB instance (default 6667)."),(0,i.kt)("h3",{id:"username"},"Username"),(0,i.kt)("p",null,"The username for the IoTDB Server."),(0,i.kt)("h3",{id:"password"},"Password"),(0,i.kt)("p",null,"The password for the IoTDB Server."),(0,i.kt)("h3",{id:"database-name"},(0,i.kt)("strong",{parentName:"h3"},"Database Name")),(0,i.kt)("p",null,"The name of the database where events will be stored (will be created if it does not exist)."),(0,i.kt)("p",null,"A database is a group of devices (entities). Users can create any prefix path as a database."),(0,i.kt)("h3",{id:"device-entity-name"},(0,i.kt)("strong",{parentName:"h3"},"Device (Entity) Name")),(0,i.kt)("p",null,"The name of the device (entity) where events will be stored."),(0,i.kt)("p",null,"A device (also called entity) is an equipped with measurements in real scenarios. In IoTDB, all measurements should have\ntheir corresponding devices."),(0,i.kt)("h3",{id:"measurements"},(0,i.kt)("strong",{parentName:"h3"},"Measurements")),(0,i.kt)("p",null,"All keys of fields in an event will be automatically converted to suffixes of timeseries."),(0,i.kt)("p",null,"A measurement is information measured by detection equipment in an actual scene and can transform the sensed information\ninto an electrical signal or other desired form of information output and send it to IoTDB."),(0,i.kt)("p",null,"In IoTDB, all data and paths stored are organized in units of measurements."),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"(not applicable for data sinks)"))}f.isMDXComponent=!0}}]);