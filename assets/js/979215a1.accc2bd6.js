"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12904],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,f=m["".concat(o,".").concat(c)]||m[c]||d[c]||i;return a?n.createElement(f,s(s({ref:t},u),{},{components:a})):n.createElement(f,s({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9909:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),s=["components"],l={id:"org.apache.streampipes.sinks.databases.jvm.influxdb",title:"InfluxDB",sidebar_label:"InfluxDB"},o=void 0,p={unversionedId:"pe/org.apache.streampipes.sinks.databases.jvm.influxdb",id:"version-0.93.0/pe/org.apache.streampipes.sinks.databases.jvm.influxdb",title:"InfluxDB",description:"\x3c!--",source:"@site/versioned_docs/version-0.93.0/pe/org.apache.streampipes.sinks.databases.jvm.influxdb.md",sourceDirName:"pe",slug:"/pe/org.apache.streampipes.sinks.databases.jvm.influxdb",permalink:"/docs/0.93.0/pe/org.apache.streampipes.sinks.databases.jvm.influxdb",draft:!1,tags:[],version:"0.93.0",lastUpdatedBy:"Tim",lastUpdatedAt:1701097113,formattedLastUpdatedAt:"Nov 27, 2023",frontMatter:{id:"org.apache.streampipes.sinks.databases.jvm.influxdb",title:"InfluxDB",sidebar_label:"InfluxDB"},sidebar:"documentation",previous:{title:"Email Notification",permalink:"/docs/0.93.0/pe/org.apache.streampipes.sinks.notifications.jvm.email"},next:{title:"JMS Publisher",permalink:"/docs/0.93.0/pe/org.apache.streampipes.sinks.brokers.jvm.jms"}},u={},m=[{value:"Description",id:"description",level:2},{value:"Required input",id:"required-input",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Hostname",id:"hostname",level:3},{value:"Port",id:"port",level:3},{value:"Database Name",id:"database-name",level:3},{value:"Measurement Name",id:"measurement-name",level:3},{value:"Username",id:"username",level:3},{value:"Password",id:"password",level:3},{value:"Timestamp Field",id:"timestamp-field",level:3},{value:"Buffer Size",id:"buffer-size",level:3},{value:"Maximum Flush",id:"maximum-flush",level:3},{value:"Output",id:"output",level:2}],d={toc:m},c="wrapper";function f(e){var t=e.components,a=(0,r.Z)(e,s);return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",{align:"center"},(0,i.kt)("img",{src:"/img/pipeline-elements/org.apache.streampipes.sinks.databases.jvm.influxdb/icon.png",width:"150px;",class:"pe-image-documentation"})),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Stores events in an InfluxDB."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"required-input"},"Required input"),(0,i.kt)("p",null,"This sink requires an event that provides a timestamp value (a field that is marked to be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"http://schema\n.org/DateTime"),"."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("h3",{id:"hostname"},"Hostname"),(0,i.kt)("p",null,"The hostname/URL of the InfluxDB instance. (Include http(s)://)."),(0,i.kt)("h3",{id:"port"},"Port"),(0,i.kt)("p",null,"The port of the InfluxDB instance."),(0,i.kt)("h3",{id:"database-name"},"Database Name"),(0,i.kt)("p",null,"The name of the database where events will be stored."),(0,i.kt)("h3",{id:"measurement-name"},"Measurement Name"),(0,i.kt)("p",null,"The name of the Measurement where events will be stored (will be created if it does not exist)."),(0,i.kt)("h3",{id:"username"},"Username"),(0,i.kt)("p",null,"The username for the InfluxDB Server."),(0,i.kt)("h3",{id:"password"},"Password"),(0,i.kt)("p",null,"The password for the InfluxDB Server."),(0,i.kt)("h3",{id:"timestamp-field"},"Timestamp Field"),(0,i.kt)("p",null,"The field which contains the required timestamp."),(0,i.kt)("h3",{id:"buffer-size"},"Buffer Size"),(0,i.kt)("p",null,"Indicates how many events are written into a buffer, before they are written to the database."),(0,i.kt)("h3",{id:"maximum-flush"},"Maximum Flush"),(0,i.kt)("p",null,"The maximum waiting time for the buffer to fill the Buffer size before it will be written to the database in ms."),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"(not applicable for data sinks)"))}f.isMDXComponent=!0}}]);